
Тема 3. Представление данных в языке С

Задание 1.
Скомпилируйте и выполните следующую программу rhodium.c:

--------------------------------------------------------------------------
/* Стоимость родия, вес которого равен вашему весу */ 
#include  <stdio.h > 
int main(void){ 
  float weight; /* вес пользователя */ 
  float value;  /* родиевый эквивалент пользователя */ 
  
  printf("Xoтитe узнать свой родиевый эквивалент?\n"); 
  printf("Дaвaйтe подсчитаем.\n" ); 
  рrintf("Пожалуйста, введите свой вес, выраженный в фунтах:"); // 1 фунт = 0.45359237 кг
  
  /* получить входные данные от пользователя */ 
  scanf("%f", &weight); 
  
  /*  считаем,  что цена родия равна $1400 за тройскую унцию */ 
  /*  14.5833  коэффициент для перевода веса, выраженного в фунтах, в тройские унции */ 
  value =  1400.0 * weight * 14.5833; 
  printf("Baш родиевый эквивалент составляет  $%.2f.\ n", value); 
  printf("Bы легко можете стать достойным этого! Если цена родия падает, \n"); 
  printf("ешьте больше для поддержания своей стоимости.\n"); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 2.
Скомпилируйте и выполните следующую программу charcode.c:
--------------------------------------------------------------------------
// Отображает кодовое значение символа 
#include  <stdio.h > 
int main(void){ 
  char  ch; 
  printf("Bвeдитe какой-нибудь символ.\n"); 
  scanf("%c", &ch);  
  printf("Koд символа %с равен %d. \n", ch, ch); 
  return 0;
}
--------------------------------------------------------------------------

Задание 3.
Скомпилируйте и выполните следующую программу showf_pt.c:
--------------------------------------------------------------------------
/* Отображает значение типа float двумя способами */ 
#include <stdio.h> 
int main (void){ 
  float  aboat = 32000.0; 
  double abet = 2.14е9; 
  long  double dip = 5.32е-5; 
  printf("%f может быть записано как %e\n", aboat, aboat);
  printf("%f может быть записано как %e\n", abet, abet);
  printf("%f может быть записано как %e\n", dip, dip);
  return 0; 
}
--------------------------------------------------------------------------

Задание 4.
Скомпилируйте и выполните следующую программу floaterr.c:
--------------------------------------------------------------------------
/* Cлужит иллюстрацией ошибки округления */ 
#include <stdio.h> 
int main(void){ 
  float а, b; 
  b = 2.0е20 + 1.0;  // 2.0е4
  а = b - 2.0е20; 
  printf("%f\n", а) ; 
  return 0;
}
--------------------------------------------------------------------------

Задание 5.
Напишите программу, которая приглашает ввести некоторое значение в коде ASCII, например, 66, а затем печатает символ,  которому соответствует введенный код. 

Подсказка.
В качестве примера можно воспользоваться следующей программой:

--------------------------------------------------------------------------
// Отображает кодовое значение символа 
#include  <stdio.h > 
int main(void){ 
  char  ch; 
  printf("Bвeдитe какой-нибудь символ.\n"); 
  scanf("%c", &ch);  
  printf("Koд символа %с равен %d. \n", ch, ch) ; 
  return 0;
}
--------------------------------------------------------------------------

Задание 6.
В году примерно 3.156xl0^7 секунд. Напишите программу, которая приглашает ввести возраст в годах, а затем выводит на экран эквивалентное значение в секундах. 

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
/* Стоимость родия, вес которого равен вашему весу */ 
#include  <stdio.h > 
int main(void){ 
  float weight; /* вес пользователя */ 
  float value;  /* родиевый эквивалент пользователя */ 
  
  printf("Xoтитe узнать свой родиевый эквивалент?\n"); 
  printf("Дaвaйтe подсчитаем.\n" ); 
  рrintf("Пожалуйста, введите свой вес, выраженный в фунтах:"); // 1 фунт = 0.45359237 кг
  
  /* получить входные данные от пользователя */ 
  scanf("%f", &weight); 
  
  /*  считаем,  что цена родия равна $1400 за тройскую унцию */ 
  /*  14.5833  коэффициент для перевода веса, выраженного в фунтах, в тройские унции */ 
  value =  1400.0 * weight * 14.5833; 
  printf("Baш родиевый эквивалент составляет  $%.2f.\ n", value); 
  printf("Bы легко можете стать достойным этого! Если цена родия падает, \n"); 
  printf("ешьте больше для поддержания своей стоимости.\n"); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 7.
В дюйме 2.54 сантиметра. Напишите программу, которая приглашает вас ввести рост в дюймах, после чего выводит на экран этот рост в сантиметрах. Либо, если вам так больше нравится, запрашивает рост в сантиметрах и переводит его в дюймы. 

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
/* Стоимость родия, вес которого равен вашему весу */ 
#include  <stdio.h > 
int main(void){ 
  float weight; /* вес пользователя */ 
  float value;  /* родиевый эквивалент пользователя */ 
  
  printf("Xoтитe узнать свой родиевый эквивалент?\n"); 
  printf("Дaвaйтe подсчитаем.\n" ); 
  рrintf("Пожалуйста, введите свой вес, выраженный в фунтах:"); // 1 фунт = 0.45359237 кг
  
  /* получить входные данные от пользователя */ 
  scanf("%f", &weight); 
  
  /*  считаем,  что цена родия равна $1400 за тройскую унцию */ 
  /*  14.5833  коэффициент для перевода веса, выраженного в фунтах, в тройские унции */ 
  value =  1400.0 * weight * 14.5833; 
  printf("Baш родиевый эквивалент составляет  $%.2f.\ n", value); 
  printf("Bы легко можете стать достойным этого! Если цена родия падает, \n"); 
  printf("ешьте больше для поддержания своей стоимости.\n"); 
  return 0; 
}
--------------------------------------------------------------------------

Тема 4. Символьные строки и форматирование ввода-вывода

Задание 8.
Скомпилируйте и выполните следующую программу talkback.c:
--------------------------------------------------------------------------
#include <stdio.h> 
#include <string.h> // для прототипа  функции  strlen()
#define DENSITY 62.4  //  плотность  человека в фунтах на кубический фут 

int main(){ 
  float  weight, volume; 
  int size, letters; 
 
  char  name[40];  //  имя  предста вляет  собой  массив из 40 символов 
  рrintf("Здравствуйте! Как вас зовут?\n"); 
  scanf("%s", name); 
  printf("%s, сколько вы  весите в фунтах?\n", name) ; 
  scanf("%f", &weight); 
  size =  sizeof name; 
  letters = strlen(name); 
  volume =  weight/DENSITY; 
  printf("Xopoшo, %s, ваш объем составляет %2.2f  кубических футов.\n", name, volume); 
  printf("К тому же ваше  имя  состоит  из  %d  символов, \n", letters); 
  printf ("и мы  располагаем %d байтами  для его сохранения.\n", size); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 9.
Скомпилируйте и выполните следующую программу praisel.c:
--------------------------------------------------------------------------

#include <stdio.h> 
#define PRAISE "Какое прекрасное имя!" 
int main(void){ 
  char name[40]; 
  printf("Kaк вас зовут?\n"); 
  scanf("%s", name); 
  рrintf("Здравствуйте, %s. %s\n", name, PRAISE); 
  return 0;
}
--------------------------------------------------------------------------

Задание 10.
Скомпилируйте и выполните следующую программу praise2.c:
--------------------------------------------------------------------------
#include <stdio.h > 
#include <string.h >  
#define PRAISE  "Какое прекрасное имя!" 
int main(void){ 
  char name[40]; 
  printf("Kaк вас зовут?\n"); 
  scanf("%s", name) ; 
  рrintf("Здравствуйте, %s. %s\n", name, PRAISE);
  printf("Baшe имя состоит из %d символов и занимает %d ячеек памяти.\n", strlen(name), sizeof name); 
  рrintf("Хвалебная фраза содержит %d символов", strlen(PRAISE)); 
  printf(" и  занимает  %d  ячеек  памяти.\n", sizеоf PRAISE); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 11.
Скомпилируйте и выполните следующую программу pizza.c:
--------------------------------------------------------------------------
#include <stdio.h> 
#define PI 3.14159 
int main(void){ 
  float  area,  circum,  radius; 
  printf("Kaкoв радиус вашей пиццы?\n"); 
  scanf("%f", &radius); 
  area = PI * radius * radius; 
  circum = 2.0 * PI * radius; 
  printf("Базовые параметры вашей пиццы:\n"); 
  printf("длинa окружности = %1.2f, площадь = %1.2f\n", circum, area); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 12.
Скомпилируйте и выполните следующую программу defines.c:
--------------------------------------------------------------------------
#include <stdio.h> 
#include <limits.h> 
#include <float.h> 
int main (void){ 
  printf("Heкoтopыe пределы для данной системы: \n"); 
  printf("Наибольшее значение типа int: %d \n", INТ_МАХ); 
  рrintf("Наименьшее значение типа long long: %lld \n", LLONG_MIN); 
  printf("Oдин байт = %d разрядов в  данной системе.\n", CHAR_BIT); 
  рrintf("Наибольшее значение типа double: %e\n", DBL_МAX); 
  рrintf("Наименьшее нормальное значение типа float: %e\n", FLT_MIN); 
  printf("Toчнocть значений типа float = %d знаков\n", FLT_DIG); 
  printf("Различие между  1.00  и наименьшим  значением  float, превышающим  1.00 = %e \n", FLT_EPSILON); 
  return 0;
}
--------------------------------------------------------------------------

Задание 13.
Скомпилируйте и выполните следующую программу width.c:
--------------------------------------------------------------------------
#include <stdio.h> 
#define PAGES 931 
int main(void){ 
  printf("*%d*\n", PAGES); 
  printf("*%2d*\n", PAGES); 
  printf("*%10d*\n", PAGES); 
  printf("*%-l0d*\n", PAGES); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 14.
Скомпилируйте и выполните следующую программу floats.с:
--------------------------------------------------------------------------
#include <stdio.h> 
int main(void){ 
  const double RENT = 3852.99; 
  printf("*%f*\n", RENT); 
  printf("*le*\n", RENT); 
  printf("*%4.2f*\n", RENТ); 
  printf("*%3.lf*\n", RENТ); 
  printf("*%10.3f*\n", RENТ); 
  printf("*%10.3e*\n", RENТ); 
  printf("*%+4.2f*\n", RENТ); 
  printf("*%010.2f*\n", RENТ); 
  return 0;
}
--------------------------------------------------------------------------

Задание 15.
Скомпилируйте и выполните следующую программу strings.с:
--------------------------------------------------------------------------
#include <stdio.h> 
#define BLURB "Authentic imitation!" 
int main(void){ 
  printf("/%2s/\n", BLURB); 
  printf("/%24s/\n", BLURB); 
  printf("/%24.5s/\n", BLURB ); 
  printf("/%-24.5s/\n", BLURB); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 16.
Скомпилируйте и выполните следующую программу input.с:
--------------------------------------------------------------------------
#include <stdio.h> 
int main(void){ 
  int age; 
  float assets; 
  char pet[30]; 
  printf("Bвeдитe информацию о своем возрасте, о сумме в банке и о любимом животном.\n"); 
  scanf("%d %f", &age, &assets);
  scanf("%s", pet);  
  printf("%d $%.2f %s\n", age, assets, pet); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 17.
Напишите  программу, которая  запрашивает  имя  и  фамилию, а  затем  печатает их в формате "фамилия, имя". 

Задание 18.
Напишите  программу,  которая  запрашивает  рост  в  дюймах (1 дюйм = 2.54 см) и  имя,  после чего отображает полученную  информацию в следующей форме: 

Ларри, ваш рост составляет 6.208 футов 

Используйте тип  float, а  также операцию  деления /. Запросите  рост в сантиметрах и выразите в метрах, если вам так удобнее. 

Задание 19.
Напишите  программу,  которая  запрашивает  имя  пользователя  и  затем  его  фамилию. Сделайте  так,  чтобы она печатала  введенные  имена  в одной строке и количество символов  в  каждом  слове в следующей строке. Выровняйте каждое количество символов по концу соответствующего имени, как показано ниже: 
Mel issa  Honeybee 
       7         8 
Затем  сделайте  так,  чтобы она печатала ту же самую  информацию, но с количеством символов, выровненным по началу каждого слова: 
Melissa  Honeybee 
7        8 

Задание 20.
Напишите  программу,  которая  присваивает  переменной  типа  double  значение 1.0/3.0 и переменной  типа  float  значение  1.0/3.0.  Выведите  на  экран  каждый результат  три  раза - в  первом случае  с  четырьмя  цифрами справа  от  десятичной точки,  во  втором случае - с  двенадцатью  цифрами и в третьем случае - с шестнадцатью  цифрами.  Включите  также  в  программу  заголовочный  файл float.h  и  выведите  на  экран значения  FLT_DIG и DBL_DIG. Совместимы ли выведенные значения со  значением  1.0/0.3? 

Тема 5. Операции, выражения и операторы

Задание 21.
Скомпилируйте и выполните следующую программу shoes2.c:
--------------------------------------------------------------------------
#include <stdio.h> 
#define ADJUST 7.64 
#define SCALE 0.325 
int main(void){ 
  double shoe, foot; 
  printf("Размер обуви (мужской) длина ступни\n"); 
  shoe = 3.0; 
  while (shoe < 18.5)  
  { 
    foot = SCALE*shoe + ADJUST; 
    printf("%10.1f %20.2f дюймов\n", shoe, foot); 
    shoe = shoe + 1.0; 
  }  
  printf("Если обувь подходит, носите ее.\n"); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 22.
Скомпилируйте и выполните следующую программу squares.c:
--------------------------------------------------------------------------
// генерирует таблицу квадратов 20 значений
#include <stdio.h> 
int main(void){ 
  int num = 1; 
  while (num < 21) 
  { 
    printf("%4d %6d\n", num, num * num); 
    num = num + 1; 
  } 
  return 0; 
}
--------------------------------------------------------------------------

Задание 23.
Скомпилируйте и выполните следующую программу wheat.c:
--------------------------------------------------------------------------
/* экспоненциальный рост*/ 
#include <stdio.h> 
#define SQUARES 64 /* количество квадратов шахматной доски*/ 
#define CROP 1E15  /* урожай пшеницы в США в зернышках*/ 
int main(void){ 
  double current, total; 
  int count = 1; 
  printf("квадрат  добавлено  итого"); 
  printf("процент от\n"); 
  printf("  зерен  зерен"); 
  printf("урожая в США\n"); 
  total = current = 1.0; /* начинаем с одного зернышка*/ 
  printf("%4d %13.2e %12.2e %12.2e\n", count, current, total, total/CROP); 
  while (count < SQUARES) 
  { 
    count = count + 1; 
    current = 2.0 * current; 
    /* удвоить количество зерен на следующем квадрате */ 
    total = total + current; /* обновить итоговую сумму */ 
    printf("%4d %13.2e %12.2e %12.2e\n", count, current, total, total/CROP); 
  } 
  printf("Вот и все.\n"); 
 return 0; 
}

--------------------------------------------------------------------------

Задание 24.
Скомпилируйте и выполните следующую программу divide.c:
--------------------------------------------------------------------------
#include <stdio.h> 
int main(void){ 
  printf("Целочисленное деление: 5/4  равно%d \n", 5/4); 
  printf("Целочисленное деление: 6/3  равно%d \n", 6/3); 
  printf("Целочисленное деление: 7/4  равно%d \n", 7/4); 
  printf("Деление с плавающей запятой: 7./4. равно%1.2f \n", 7./4.); 
  printf("Смешанное деление: 7./4 равно%1.2f \n", 7./4); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 25.
Скомпилируйте и выполните следующую программу rules.c:
--------------------------------------------------------------------------
#include <stdio.h> 
int main(void){ 
  int top, score; 
  top = score = -(2 + 5) * 6 + (4 + 3 * (2 + 3)); 
  printf("top = %d \n", top); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 26.
Скомпилируйте и выполните следующую программу sizeof.c:
--------------------------------------------------------------------------
// sizeof.c -- использование операцииsizeof 
// Применение модификатора%z стандартаC99 -- попытайтесь воспользоваться
// %u или%lu, если вам не достаточно%zd 
#include <stdio.h> 
int main(void){ 
  int n = 0; 
  size_t intsize; 
  intsize = sizeof (int); 
  printf("n = %d, n состоит из%zd байтов; все значенияint имеют%zd байтов.\n", n, sizeof n, intsize ); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 27.
Скомпилируйте и выполните следующую программу min_sec.c:
--------------------------------------------------------------------------
// переводит секунды в минуты и секунды
#include <stdio.h> 
#define SEC_PER_MIN 60 // число секунд в минуты
int main(void){ 
  int sec, min, left; 
  printf("Перевод секунд в минуты и секунды!\n"); 
  printf("Введите количество секунд(<=0 для выхода):\n"); 
  scanf("%d", &sec); // читать количество секунд
  while (sec > 0) 
  { 
    min = sec / SEC_PER_MIN; // усеченное количество минут
    left = sec % SEC_PER_MIN; // число количество в остатке
    printf("%d секунд- это%d минут%d секунд.\n", sec, min, left); 
    printf("Введите следующее значение(<=0 для выхода):\n"); 
    scanf("%d", &sec); 
  } 
  printf("Сделано!\n"); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 28.
Скомпилируйте и выполните следующую программу post_pre.c:
--------------------------------------------------------------------------
/* постфиксная и префиксная формы*/ 
#include <stdio.h> 
int main(void){ 
  int a = 1, b = 1; 
  int aplus, plusb; 
  aplus = a++; /* постфиксная форма*/ 
  plusb = ++b; /* префиксная форма*/ 
  printf("a aplus b plusb \n"); 
  printf("%1d %5d %5d %5d\n", a, aplus, b, plusb); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 29.
Скомпилируйте и выполните следующую программу addemup.c:
--------------------------------------------------------------------------
/* находит сумму первых 20 натуральных чисел */ 
#include <stdio.h> 
int main(void){ 
  int count, sum; /* оператор объявления */ 
  count = 0; /* оператор присваивания */ 
  sum = 0;  /* то же самое*/ 
  while (count++ < 20) /* оператор цикла while */ 
    sum = sum + count; /* операторы */ 
  printf("sum = %d\n", sum); /* оператор вызова функции */ 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 30.
Скомпилируйте и выполните следующую программу convert.c:
--------------------------------------------------------------------------
/* автоматическое преобразование типов */ 
#include <stdio.h> 
int main(void){ 
  char ch; 
  int i; 
  float fl; 
  fl = i = ch = 'C'; /* строка 9 */ 
  printf("ch = %c, i = %d, fl = %2.2f\n", ch, i, fl); /* строка 10 */ 
  ch = ch + 1; /* строка 11 */ 
  i = fl + 2 * ch; /* строка 12 */ 
  fl = 2.0 * ch + i; /* строка 13 */ 
  printf("ch = %c, i = %d, fl = %2.2f\n", ch, i, fl); /* строка 14 */ 
  ch = 5212205.17; /* строка 15 */ 
  printf("Теперь ch = %c\n", ch); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 31.
Скомпилируйте и выполните следующую программу pound.c:
--------------------------------------------------------------------------
/* определяет функцию с одним аргументом */ 
#include <stdio.h> 
void pound(int n); /* прототип ANSI */ 
int main(void){ 
  int times = 5; 
  char ch = '!'; /* ASCII-код равен 33 */ 
  float f = 6.0; 
  pound(times); /* аргумент типа int */ 
  pound(ch); /* тип char автоматически приводится к типу int */ 
  pound((int) f); /* приведение типа f -> int */ 
  return 0; 
} 
void pound(int n){ 
  while (n-- > 0) 
    printf("#"); 
  printf("\n"); 
} 
--------------------------------------------------------------------------

Задание 32.
Напишите программу, которая переводит время в минутах во время в часах и минутах. Воспользуйтесь инструкциями #define или const для создания символьной константы со значением 60. Используйте цикл while, чтобы обеспечить пользователю возможность повторного ввода значений и для прекращения цикла, если вводится значение времени, меньшее или равное нулю.

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
// переводит секунды в минуты и секунды
#include <stdio.h> 
#define SEC_PER_MIN 60 // число секунд в минуты
int main(void){ 
  int sec, min, left; 
  printf("Перевод секунд в минуты и секунды!\n"); 
  printf("Введите количество секунд(<=0 для выхода):\n"); 
  scanf("%d", &sec); // читать количество секунд
  while (sec > 0) 
  { 
    min = sec / SEC_PER_MIN; // усеченное количество минут
    left = sec % SEC_PER_MIN; // число количество в остатке
    printf("%d секунд - это %d минут %d секунд.\n", sec, min, left); 
    printf("Введите следующее значение(<=0 для выхода):\n"); 
    scanf("%d", &sec); 
  } 
  printf("Сделано!\n"); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 33.
Напишите программу, которая запрашивает ввод целого числа, а затем печатает все целые числа, начиная (и включая) с этого числа и до числа, большего введенной величины на 10 включительно. (Иначе говоря, если вводится число 5, то выходными данными являются числа от 5 до 15 включительно.) Обязательно отделите друг от друга значения выходных данных пробелом либо символами табуляции или новой строки. 

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
/* находит сумму первых 20 натуральных чисел */ 
#include <stdio.h> 
int main(void){ 
  int count, sum; /* оператор объявления */ 
  count = 0; /* оператор присваивания */ 
  sum = 0;  /* то же самое*/ 
  while (count++ < 20) /* оператор цикла while */ 
    sum = sum + count; /* операторы */ 
  printf("sum = %d\n", sum); /* оператор вызова функции */ 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 34.
Внесите изменения в программу addemup.c, благодаря которым вы можете в интерактивном режиме указать, насколько далеко зайдут вычисления. Другими словами, замените целое число 20 переменной, значение которой программа может вводить. 

--------------------------------------------------------------------------
/* addemup.c - находит сумму первых 20 натуральных чисел */ 
#include <stdio.h> 
int main(void){ 
  int count, sum; /* оператор объявления */ 
  count = 0; /* оператор присваивания */ 
  sum = 0;  /* то же самое*/ 
  while (count++ < 20) /* оператор цикла while */ 
    sum = sum + count; /* операторы */ 
  printf("sum = %d\n", sum); /* оператор вызова функции */ 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 35.
Напишите программу, которая запрашивает ввод числа типа float и распечатывает значение куба этого числа. С этой целью воспользуйтесь функцией, которая  возводит  заданное  значение  в  куб  и  распечатывает  результат, но эту функцию вы должны реализовать самостоятельно. Программа main() должна передать вводимое значение этой функции.

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
/* определяет функцию с одним аргументом */ 
#include <stdio.h> 
void pound(int n); /* прототип ANSI */ 
int main(void){ 
  int times = 5; 
  char ch = '!'; /* ASCII-код равен 33 */ 
  float f = 6.0; 
  pound(times); /* аргумент типа int */ 
  pound(ch); /* тип char автоматически приводится к типу int */ 
  pound((int) f); /* приведение типа f -> int */ 
  return 0; 
} 
void pound(int n){ 
  while (n-- > 0) 
    printf("#"); 
  printf("\n"); 
} 
--------------------------------------------------------------------------

Задание 36.
Напишите программу, которая требует от пользователя ввести значение температуры  по  Фаренгейту. Программа должна считывать значение температуры как число типа double и передать его как аргумент пользовательской функции с именем Temperatures(). Эта функция должна вычислять эквивалентные значения температуры по Цельсию и по Кельвину и отображать на экране все три значения температуры с точностью до двух позиций справа от десятичной точки. Функция должна сопоставлять каждое значение с температурной шкалой, которую оно представляет. 

Формула перевода температуры по Фаренгейту в температуру по Цельсию имеет вид: 
Температура-по-Цельсию = 1.8 * Температура-по-Фаренгейту + 32.0 

В  шкале  Кельвина, которая  обычно  применяется  в  научных  применениях, 0 представляет абсолютный нуль, минимальный предел возможных температур. Формула перевода температуры по Цельсию в температуру по Фаренгейту имеет вид: 

Температура-по-Кельвину = Температура-по-Цельсию + 273.16 

Функция Temperatures() должна использовать const для создания символических представлений трех констант, которые используются для перевода. Функция main() должна использовать цикл, чтобы предоставить пользователю возможность многократного ввода значений температуры. Программа завершает работу, когда будет введен символ q или какое-то другое нечисловое значение. 

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
/* определяет функцию с одним аргументом */ 
#include <stdio.h> 
void pound(int n); /* прототип ANSI */ 
int main(void){ 
  int times = 5; 
  char ch = '!'; /* ASCII-код равен 33 */ 
  float f = 6.0; 
  pound(times); /* аргумент типа int */ 
  pound(ch); /* тип char автоматически приводится к типу int */ 
  pound((int) f); /* приведение типа f -> int */ 
  return 0; 
} 
void pound(int n){ 
  while (n-- > 0) 
    printf("#"); 
  printf("\n"); 
} 
--------------------------------------------------------------------------

Тема 6. Управляющие операторы: циклы

Задание 37.
Скомпилируйте и выполните следующую программу summing.c:
--------------------------------------------------------------------------
/* суммирует целые числа, вводимые в интерактивном режиме */ 
#include <stdio.h> 
int main(void){ 
  long num; 
  long sum = 0L; /* инициализация переменной sum нулем */ 
  int status; 
  printf("Введите целое число для последующего суммирования"); 
  printf("(или q для завершения программы): "); 
  status = scanf("%ld", &num); 
  while (status == 1) /* == обозначает равенство */ 
  { 
    sum = sum + num; 
    printf("Введите следующее целое число(или q для завершения программы): "); 
    status = scanf("%ld", &num); 
  } 
  printf("Сумма введенных целых чисел равна%ld.\n", sum); 
  return 0; 
} 

/*
while (scanf("%ld", &num) == 1) 
{ 
	/* действия, выполняемые в цикле*/ 
}
*/

--------------------------------------------------------------------------

Задание 38.
Скомпилируйте и выполните следующую программу when.c:
--------------------------------------------------------------------------
// когда цикл завершается? 
#include <stdio.h> 
int main(void){ 
  int n = 5; 
  while (n < 7) // строка7 
  { 
    printf("n = %d\n", n); 
    n++; // строка 10 
    printf("Теперь n = %d\n", n); // строка 11 
  } 
  printf("Цикл завершен.\n"); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 39.
Скомпилируйте и выполните следующую программу cmpflt.c:
--------------------------------------------------------------------------
// сравнение чисел с плавающей запятой
#include <math.h> 
#include <stdio.h> 
int main(void){ 
  const double ANSWER = 3.14159; 
  double response; 
  printf("Каково значение числа pi?\n"); 
  scanf("%lf", &response); 
  while (fabs(response - ANSWER) > 0.0001) 
  { 
    printf("Введите значение повторно!\n"); 
    scanf("%lf", &response); 
  } 
  printf("Требуемая точность достигнута!\n"); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 40.
Скомпилируйте и выполните следующую программу t_and_f.c:
--------------------------------------------------------------------------
/* истинные и ложные выражения в языкеC */ 
#include <stdio.h> 
int main(void){ 
  int true_val, false_val; 
  true_val = (10 > 2); /* значение истинного отношения */ 
  false_val = (10 == 2); /* значения ложного отношения */ 
  printf("true = %d; false = %d \n", true_val, false_val); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 41.
Скомпилируйте и выполните следующую программу truth.c:
--------------------------------------------------------------------------
// какие значения обозначают истину? 
#include <stdio.h> 
int main(void){ 
  int n = 3; 
  while(n) 
    printf("%2d естьtrue\n", n--); 
  printf("%2d естьfalse\n", n); 
  n = -3; 
  while(n) 
    printf("%2d естьtrue\n", n++); 
  printf("%2d естьfalse\n", n); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 42.
Скомпилируйте и выполните следующую программу sweetie1.c:
--------------------------------------------------------------------------
// цикл со счетчиком
#include <stdio.h> 
int main(void){ 
  const int NUMBER = 22; 
  int count = 1; // инициализация
  while (count <= NUMBER) // проверка
  { 
    printf("Будьте моим Валентином!\n"); // действие
    count++; // обновление значения count 
  } 
  return 0 
} 
--------------------------------------------------------------------------

Задание 43.
Скомпилируйте и выполните следующую программу sweetie2.c:
--------------------------------------------------------------------------
// цикл со счетчиком, использующий for 
#include <stdio.h> 
int main(void){ 
  const int NUMBER = 22; 
  int count; 
  for (count = 1; count <= NUMBER; count++) 
    printf("Будьте моим Валентином!\n"); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 44.
Скомпилируйте и выполните следующую программу for_cube.c:
--------------------------------------------------------------------------
/* использование цикла for для построения таблицы кубов целых чисел */ 
#include <stdio.h> 
int main(void){ 
  int num; 
  printf(" n n в кубе\n"); 
  for (num = 1; num <= 6; num++) 
    printf("%5d %5d\n", num, num*num*num); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 45.
Скомпилируйте и выполните следующую программу for_char.c:
--------------------------------------------------------------------------
#include <stdio.h> 
int main(void){ 
  char ch; 
  for (ch = 'a'; ch <= 'z'; ch++) 
    printf("Значение ASCII для %c равно %d.\n", ch, ch); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 46.
Скомпилируйте и выполните следующую программу postage.c :
--------------------------------------------------------------------------
// тарифы почтового обслуживания первого класса
#include <stdio.h> 
int main(void){ 
  const int FIRST_OZ = 37;
  const int NEXT_OZ = 23; 
  int ounces, cost; 
  printf(" унции тариф\n"); 
  for (ounces=1, cost=FIRST_OZ; ounces <= 16; ounces++, cost += NEXT_OZ) 
    printf("%5d $%4.2f\n", ounces, cost/100.0); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 47.
Скомпилируйте и выполните следующую программу zeno.c:
--------------------------------------------------------------------------
/* сумма последовательности */ 
#include <stdio.h> 
int main(void){ 
  int t_ct; // счетчик элементов последовательности
  double time, x; 
  int limit; 
  printf("Введите необходимое количество элементов последовательности: "); 
  scanf("%d", &limit); 
  for (time=0, x=1, t_ct=1; t_ct <= limit; t_ct++, x *= 2.0) 
  { 
    time += 1.0/x; 
    printf("Время= %f, когда количество элементов= %d.\n", time, t_ct); 
  } 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 48.
Скомпилируйте и выполните следующую программу do_while.c:
--------------------------------------------------------------------------
/* цикл с постусловием*/ 
#include <stdio.h> 
int main(void){ 
  const int secret_code = 13; 
  int code_entered; 
  do 
  { 
    printf("Чтобы войти в клуб лечения шпиономании,\n"); 
    printf("пожалуйста, введите секретный код: "); 
    scanf("%d", &code_entered); 
  } while (code_entered != secret_code); 
  printf("Поздравляем! Вы уже здоровы!\n"); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 49.
Скомпилируйте и выполните следующую программу rows1.c:
--------------------------------------------------------------------------
/* использование вложенных циклов */ 
#include <stdio.h> 
#define ROWS 6 
#define CHARS 10 
int main(void){ 
  int row; 
  char ch; 
  for (row = 0; row < ROWS; row++) /* строка 10 */ 
  { 
    for (ch = 'A'; ch < ('A' + CHARS); ch++) /* строка 12 */ 
      printf("%c", ch); 
    printf("\n"); 
  } 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 50.
Скомпилируйте и выполните следующую программу rows2.c:
--------------------------------------------------------------------------
// использование зависимых вложенных циклов
#include <stdio.h> 
int main(void){ 
  const int ROWS = 6; 
  const int CHARS = 6; 
  int row; 
  char ch; 
  for (row = 0; row < ROWS; row++) 
  { 
    for (ch = ('A' + row); ch < ('A' + CHARS); ch++) 
      printf("%c", ch); 
    printf("\n"); 
  } 
  return 0; 
}
--------------------------------------------------------------------------

Задание 51.
Скомпилируйте и выполните следующую программу scores_in.c:
--------------------------------------------------------------------------
// использование циклов для обработки массивов
#include <stdio.h> 
#define SIZE 10 
#define PAR 72
int main(void){ 
  int index, score[SIZE]; 
  int sum = 0; 
  float average; 
  printf("Введите %d результатов игры в гольф:\n", SIZE); 
  for (index = 0; index < SIZE; index++) 
    scanf("%d", &score[index]); // прочитать 10 результатов игры в гольф
  
  printf("Введены следующие результаты:\n"); 
  
  for (index = 0; index < SIZE; index++) 
    printf("%5d", score[index]); // проверить введенную информацию
  
  printf("\n"); 
  
  for (index = 0; index < SIZE; index++) 
    sum += score[index]; // сложить результаты

  average = (float) sum / SIZE; // распределение во времени
  printf("Окончательная сумма очков= %d, среднее значение= %.2f\n", sum, average); 
  printf("Полученный гандикап равен %.0f.\n", average - PAR); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 52.
Скомпилируйте и выполните следующую программу power.c:
--------------------------------------------------------------------------
// возведение чисел в целую степень
#include <stdio.h> 
double power(double n, int p); // прототип ANSI 
int main(void){ 
  double x, xpow; 
  int exp; 
  printf("Введите число и положительную целую степень,"); 
  printf(" в которую\n число будет возведено. Для завершения программы"); 
  printf(" введите q.\n"); 
  while (scanf("%lf%d", &x, &exp) == 2) 
  { 
    xpow = power(x,exp); // вызов функции
    printf("%.3g в степени %d равно %.5g\n", x, exp, xpow); 
    printf("Введите следующую пару чисел или q для завершения.\n"); 
  } 
  printf("Надеемся, вас удовлетворило качество программы — до свидания!\n"); 
  return 0; 
} 

double power(double n, int p) // определение функции
{ 
  double pow = 1; 
  int i; 
  for (i = 1; i <= p; i++) 
    pow *= n; 
  return pow; // возврат значения переменной pow 
} 
--------------------------------------------------------------------------

Задание 53.
Напишите программу, которая создает массив из 26 элементов и помещает в него 26 букв нижнего регистра. Заставьте ее вывести содержимое массива. 

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
// использование циклов для обработки массивов
#include <stdio.h> 
#define SIZE 10 
#define PAR 72
int main(void){ 
  int index, score[SIZE]; 
  int sum = 0; 
  float average; 
  printf("Введите %d результатов игры в гольф:\n", SIZE); 
  for (index = 0; index < SIZE; index++) 
    scanf("%d", &score[index]); // прочитать 10 результатов игры в гольф
  
  printf("Введены следующие результаты:\n"); 
  
  for (index = 0; index < SIZE; index++) 
    printf("%5d", score[index]); // проверить введенную информацию
  
  printf("\n"); 
  
  for (index = 0; index < SIZE; index++) 
    sum += score[index]; // сложить результаты

  average = (float) sum / SIZE; // распределение во времени
  printf("Окончательная сумма очков= %d, среднее значение= %.2f\n", sum, average); 
  printf("Полученный гандикап равен %.0f.\n", average - PAR); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 54.
Воспользуйтесь вложенными циклами, чтобы написать программу, которая выводит на печать такую фигуру: 
F 
FE 
FED 
FEDC 
FEDCB 
FEDCBA 

Примечание: если система не использует ASCII или некоторые другие кодировки, которые кодируют буквы в числовом порядке, то для инициализации символьного массива буквами алфавита вы можете воспользоваться следующим оператором: 

char lets[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; 

Затем вы можете использовать индексы массива для выбора конкретных букв, например, lets[0] равно 'A' и так далее. 

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
// использование зависимых вложенных циклов
#include <stdio.h> 
int main(void){ 
  const int ROWS = 6; 
  const int CHARS = 6; 
  int row; 
  char ch; 
  for (row = 0; row < ROWS; row++) 
  { 
    for (ch = ('A' + row); ch < ('A' + CHARS); ch++) 
      printf("%c", ch); 
    printf("\n"); 
  } 
  return 0; 
}
--------------------------------------------------------------------------

Задание 55.
Напишите  программу, печатающую  таблицу, в  каждой  строке  которой  представлено целое число, его квадрат и его куб. Запросите у пользователя верхний и нижний пределы таблицы. Используйте цикл for.

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
/* использование цикла for для построения таблицы кубов целых чисел */ 
#include <stdio.h> 
int main(void){ 
  int num; 
  printf(" n n в кубе\n"); 
  for (num = 1; num <= 6; num++) 
    printf("%5d %5d\n", num, num*num*num); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 56. 
Напишите программу, которая читает слово в символьный массив, а затем печатает  это  слово  в  обратном  порядке.  Совет:  воспользуйтесь  функцией strlen() для вычисления индекса последнего символа массива. 

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
#include <stdio.h> 
#include <string.h> // для прототипа  функции  strlen()
#define DENSITY 62.4  //  плотность  человека в фунтах на кубический фут 

int main(){ 
  float  weight, volume; 
  int size, letters; 
 
  char  name[40];  //  имя  предста вляет  собой  массив из 40 символов 
  рrintf("Здравствуйте! Как вас зовут?\n"); 
  scanf("%s", name); 
  printf("%s, сколько вы  весите в фунтах?\n", name) ; 
  scanf("%f", &weight); 
  size =  sizeof name; 
  letters = strlen(name); 
  volume =  weight/DENSITY; 
  printf("Xopoшo, %s, ваш объем составляет %2.2f  кубических футов.\n", name, volume); 
  printf("К тому же ваше  имя  состоит  из  %d  символов, \n", letters); 
  printf ("и мы  располагаем %d байтами  для его сохранения.\n", size); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 57.
Напишите программу, которая читает восемь целых чисел в массив, а затем выводит их в обратном порядке. 

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
// использование циклов для обработки массивов
#include <stdio.h> 
#define SIZE 10 
#define PAR 72
int main(void){ 
  int index, score[SIZE]; 
  int sum = 0; 
  float average; 
  printf("Введите %d результатов игры в гольф:\n", SIZE); 
  for (index = 0; index < SIZE; index++) 
    scanf("%d", &score[index]); // прочитать 10 результатов игры в гольф
  
  printf("Введены следующие результаты:\n"); 
  
  for (index = 0; index < SIZE; index++) 
    printf("%5d", score[index]); // проверить введенную информацию
  
  printf("\n"); 
  
  for (index = 0; index < SIZE; index++) 
    sum += score[index]; // сложить результаты

  average = (float) sum / SIZE; // распределение во времени
  printf("Окончательная сумма очков= %d, среднее значение= %.2f\n", sum, average); 
  printf("Полученный гандикап равен %.0f.\n", average - PAR); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 58.
Рассмотрим две следующих бесконечных последовательности: 

1.0 + 1.0/2.0 + 1.0/3.0 + 1.0/4.0 + ... 
1.0 - 1.0/2.0 + 1.0/3.0 - 1.0/4.0 + ... 

Напишите программу, которая подсчитывает текущие суммы этих двух последовательностей до тех пор, пока не будет обработано заданное количество элементов последовательностей. Это количество пользователь вводит в программу в интерактивном режиме. Программа отображает значения текущих сумм 20 элементов, 100 элементов, 500 элементов. Сходятся ли эти последовательности
к какому-либо значению? Совет: –1, умноженная сама на себя нечетное число раз, дает в результате –1, а четное число раз — 1. 

Подсказка 59.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
/* сумма последовательности */ 
#include <stdio.h> 
int main(void){ 
  int t_ct; // счетчик элементов последовательности
  double time, x; 
  int limit; 
  printf("Введите необходимое количество элементов последовательности: "); 
  scanf("%d", &limit); 
  for (time=0, x=1, t_ct=1; t_ct <= limit; t_ct++, x *= 2.0) 
  { 
    time += 1.0/x; 
    printf("Время= %f, когда количество элементов= %d.\n", time, t_ct); 
  } 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 60.
Напишите программу, которая создает восьмиэлементный массив значений типа int и помещает в него элементы восьми первых степеней числа 2, а затем выводит полученные значения на печать. 

Подсказка 61.
Используйте цикл for для вычисления элементов массива, и для разнообразия воспользуйтесь циклом do while для отображения значений. 

Задание 62.
Напишите программу, которая читает строку входных данных, а затем печатает эту строку в обратном порядке. Вы можете запоминать входные данные в массиве значений типа char; предполагается, что строка состоит не более чем из 255 символов. Напоминаем о том, что вы можете воспользоваться функцией scanf() со спецификатором %c, чтобы выполнять посимвольное считывание с устройства ввода, а также о том, что после каждого нажатия клавиши <Enter> генерируется символ новой строки(\n).

Подсказка.
В качестве примера можно воспользоваться следующей программой:
--------------------------------------------------------------------------
// использование циклов для обработки массивов
#include <stdio.h> 
#define SIZE 10 
#define PAR 72
int main(void){ 
  int index, score[SIZE]; 
  int sum = 0; 
  float average; 
  printf("Введите %d результатов игры в гольф:\n", SIZE); 
  for (index = 0; index < SIZE; index++) 
    scanf("%d", &score[index]); // прочитать 10 результатов игры в гольф
  
  printf("Введены следующие результаты:\n"); 
  
  for (index = 0; index < SIZE; index++) 
    printf("%5d", score[index]); // проверить введенную информацию
  
  printf("\n"); 
  
  for (index = 0; index < SIZE; index++) 
    sum += score[index]; // сложить результаты

  average = (float) sum / SIZE; // распределение во времени
  printf("Окончательная сумма очков= %d, среднее значение= %.2f\n", sum, average); 
  printf("Полученный гандикап равен %.0f.\n", average - PAR); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 63.
Дафна делает вклад в сумме $100 и ежегодной процентной ставкой (простой процент) 10%. (То есть, ежегодный прирост вклада составляет 10% от первоначальной суммы.) Дейдра вкладывает $100 с ежегодной процентной ставкой 5%, но процент сложный. (Это значит, что ежегодное увеличение вклада достигает 5% от текущего баланса, включая предыдущий прирост вклада.) Напишите программу, которая вычисляет, сколько нужно лет, чтобы сумма на счету Дейдры превзошла сумму на счету Дафны. Выведите также размеры обоих вкладов на тот момент. 


Тема 7. Управляющие операторы: ветвление и безусловные переходы.

Задание 64.
Скомпилируйте и выполните следующую программу colddays.c:
--------------------------------------------------------------------------
// вычисляет процент случаев, когда температура опускается ниже нуля
#include <stdio.h> 
int main(void){ 
  const int FREEZING = 0; 
  float temperature; 
  int cold_days = 0; 
  int all_days = 0; 
  printf("Введите список дневных температур.\n"); 
  printf("Используйте шкалу Цельсия; для завершения введитеq.\n"); 
  while (scanf("%f", &temperature) == 1) 
  { 
    all_days++; 
    if (temperature < FREEZING) 
    cold_days++; 
  } 
  if (all_days != 0) 
    printf("%d - общее количество дней: %.1f%% с температурой ниже нуля.\n", all_days, 100.0 * (float) cold_days / all_days); 
  if (all_days == 0) 
    printf("Данные не введены!\n"); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 65.
Скомпилируйте и выполните следующую программу cypher1.c:
--------------------------------------------------------------------------
/* вносит изменения во входные данные, сохраняя пробелы*/ 
#include <stdio.h> 
#define SPACE ' ' /* кавычка, пробел, кавычка*/ 
int main(void){ 
  char ch; 
  ch = getchar();    /* читать символ*/ 
  while (ch != '\n') /* если это не символ конца строки*/ 
  { 
    if (ch == SPACE) /* оставить пробел нетронутым*/ 
      putchar(ch);   /* символ не меняется*/ 
    else 
      putchar(ch + 1); /* изменить другие символы*/ 
    ch = getchar();    /* взять следующий символ*/ 
  } 
  putchar(ch); /* печатать символ новой строки*/ 
  return 0; 
}
--------------------------------------------------------------------------

Задание 66.
Скомпилируйте и выполните следующую программу cypher2.c:
--------------------------------------------------------------------------
// меняет символы входных данных, оставляя неизменными символы, не являющиеся буквами
#include <stdio.h> 
#include <ctype.h> // для функции isalpha() 
int main(void){ 
  char ch; 
  while ((ch = getchar()) != '\n') 
  { 
    if (isalpha(ch)) // если это буква, 
      putchar(ch + 1); // изменить ее
    else // в противном случае
      putchar(ch); // вывести символ таким, каким он есть
  } 
  putchar(ch); // печатать символ новой строки
  return 0; 
} 
--------------------------------------------------------------------------

Задание 67.
Скомпилируйте и выполните следующую программу electric.c:
--------------------------------------------------------------------------
/* подсчитывает сумму для счета за электроэнергию*/ 
#include <stdio.h> 
#define RATE1 0.12589  /* тариф за первые 360 кВт/ч*/ 
#define RATE2 0.17901  /* тариф за следующие 320 кВт/ч*/ 
#define RATE3 0.20971  /* тариф, когда расход превышает 680 кВт/ч*/ 
#define BREAK1 360.0  /* первая точка разрыва тарифов*/ 
#define BREAK2 680.0  /* вторая точка разрыва тарифов*/ 
#define BASE1 (RATE1 * BREAK1) /* стоимость 360 кВт/ч*/ 
#define BASE2 (BASE1 + (RATE2 * (BREAK2 - BREAK1))) 
/* стоимость680 кВт/ч*/ 
int main(void){ 
  double kwh;  /* израсходованные киловатт-часы*/ 
  double bill;  /* сумма к оплате*/ 
  printf("Введите количество израсходованной электроэнергии в кВт/ч.\n"); 
  scanf("%lf", &kwh);  /* %lf для типа double */ 
  if (kwh <= BREAK1) 
    bill = RATE1 * kwh; 
  else if (kwh <= BREAK2) /* количество кВт/ч в промежутке от 360 до 680 */ 
    bill = BASE1 + (RATE2 * (kwh - BREAK1)); 
  else /* количество кВт/ч превышает680 */ 
    bill = BASE2 + (RATE3 * (kwh - BREAK2)); 
  printf("Сумма к оплате за %.1f кВт/ч составляет $%1.2f.\n", kwh, bill); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 68.
Скомпилируйте и выполните следующую программу divisors.c:
--------------------------------------------------------------------------
// вложенные операторыif отображают на экране делители заданного числа
#include <stdio.h> 
#include <stdbool.h> 
int main(void){ 
  unsigned long num; // анализируемое число
  unsigned long div; // возможные делители
  bool isPrime; // флаг простого числа
  printf("Введите целое число для анализа; "); 
  printf("для завершения введите q.\n"); 
  while (scanf("%lu", &num) == 1) 
  { 
    for (div = 2, isPrime= true; (div * div) <= num; div++) 
    { 
      if (num % div == 0) 
      { 
        if ((div * div) != num) 
          printf("%lu делится на %lu и %lu.\n", num, div, num / div); 
        else 
          printf("%lu делится на %lu.\n", num, div); 
        isPrime= false; // число не является простым
      } 
    } 
    if (isPrime) 
      printf("%lu является простым числом.\n", num); 
    printf("Введите следующее число для анализа; "); 
    printf("для завершения введите q.\n"); 
  } 
  printf("Всего хорошего.\n"); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 69.
Скомпилируйте и выполните следующую программу chcount.c:
--------------------------------------------------------------------------
// использование логического оператора AND 
#include <stdio.h> 
#define PERIOD '.' 
int main(void){ 
  int ch; 
  int charcount = 0; 
  while ((ch = getchar()) != PERIOD) 
  { 
    if (ch != '"' && ch != '\'') 
	  charcount++; 
  } 
  printf("В данном предложении содержатся %d символов, отличных от кавычек.\n", charcount); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 70.
Скомпилируйте и выполните следующую программу wordcnt.c:
--------------------------------------------------------------------------
// производит подсчет символов, слов, строк
#include <stdio.h> 
#include <ctype.h> // файл, содержащий функцию isspace() 
#include <stdbool.h> // ключевые словаbool, true, false 
#define STOP '|' 
int main(void){ 
  char c; // считанный символ
  char prev; // предыдущий считанный символ
  long n_chars = 0L; // счетчик символов
  int n_lines = 0; // счетчик строк
  int n_words = 0; // количество слов
  int p_lines = 0; // количество частичных слов
  bool inword = false; // == true еслиc внутри слова
  printf("Введите текст для анализа(| для завершения):\n"); 
  prev = '\n'; // используется для распознавания полноценных строк
  while ((c = getchar()) != STOP) 
  { 
    n_chars++; // подсчет символов
    if (c == '\n') 
      n_lines++; // подсчет строк
    if (!isspace(c) && !inword) 
    { 
      inword = true; // начало нового слова
      n_words++; // подсчет слов
    } 
    if (isspace(c) && inword) 
      inword = false; // достигнут конец слова
    prev = c; // сохраняет символьное значение
  } 
  if (prev != '\n') 
    p_lines = 1; 
  printf("количество символов= %ld, количество слов= %d, количество строк= %d, ", 
  n_chars, n_words, n_lines); 
  printf("количество частичных строк= %d\n", p_lines); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 71.
Скомпилируйте и выполните следующую программу paint.c:
--------------------------------------------------------------------------
/* использование условной операции*/ 
#include <stdio.h> 
#define COVERAGE 200 /* число квадратных футов на одну банку краски*/ 
int main(void){ 
  int sq_feet; 
  int cans; 
  printf("Введите число квадратных футов, которые необходимо покрасить:\n"); 
  while (scanf("%d", &sq_feet) == 1) 
  { 
    cans = sq_feet / COVERAGE; 
    cans += ((sq_feet % COVERAGE == 0)) ? 0 : 1; 
    printf("Для этого потребуется %d %s краски.\n", cans, 
    cans == 1 ? "банка" : "банки"); 
    printf("Введите следующее значение(илиq для завершения):\n"); 
  } 
  return 0; 
}
--------------------------------------------------------------------------

Задание 72.
Скомпилируйте и выполните следующую программу skippart.c:
--------------------------------------------------------------------------
/* использует оператор continue, чтобы пропустить часть цикла*/ 
#include <stdio.h> 
int main(void){ 
  const float MIN = 0.0f; 
  const float MAX = 100.0f; 
  float score; 
  float total = 0.0f; 
  int n = 0; 
  float min = MAX; 
  float max = MIN; 
  printf("Введите результат первой игры(или q для завершения): "); 
  while (scanf("%f", &score) == 1) 
  { 
    if (score < MIN || score > MAX) 
    { 
      printf("%0.1f - недопустимое значение. Повторите попытку: ", score); 
      continue; 
    } 
    printf("Воспринято %0.1f:\n", score); 
    min = (score < min)? score: min; 
    max = (score > max)? score: max; 
    total += score; 
    n++; 
    printf("Введите результат следующей игры(или q для завершения): "); 
  } 
  if (n > 0) 
  { 
    printf("Среднее значение %d результатов равно %0.1f.\n", n, total / n);
    printf("Минимальное= %0.1f, максимальное= %0.1f\n", min, max); 
  } 
  else 
    printf("Допустимые результаты игр не введены.\n"); 
    return 0; 
} 
--------------------------------------------------------------------------

Задание 73.
Скомпилируйте и выполните следующую программу break.c:
--------------------------------------------------------------------------
/* использует оператор break для выхода из цикла*/ 
#include <stdio.h> 
int main(void){ 
  float length, width; 
  printf("Введите длину прямоугольника:\n"); 
  while (scanf("%f", &length) == 1) 
  { 
    printf("Длина= %0.2f:\n", length); 
    printf("Введите ширину прямоугольника:\n"); 
    if (scanf("%f", &width) != 1) 
      break; 
    printf("Ширина= %0.2f:\n", width); 
    printf("Площадь= %0.2f:\n", length * width); 
    printf("Введите длину прямоугольника:\n"); 
  } 
  printf("Программа завершена.\n"); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 74.
Скомпилируйте и выполните следующую программу animals.c:
--------------------------------------------------------------------------
/* использование оператора switch */ 
#include <stdio.h> 
#include <ctype.h> 
int main(void){ 
  char ch; 
  printf("Дайте мне букву алфавита, и я укажу вам"); 
  printf("название животного,\n начинающееся с этой буквы.\n"); 
  printf("Введите букву или # для завершения.\n"); 
  while ((ch = getchar()) != '#') 
  { 
    if('\n' == ch) 
      continue; 
    if (islower(ch)) /* только строчные буквы*/ 
      switch (ch)
      { 
      case 'а' : 
        printf("аргали, дикий горный азиатский баран\n"); 
        break; 
      case 'б' : 
        printf("бабирусса, дикая малайская свинья\n"); 
        break; 
      case 'к' : 
        printf("коати, носуха обыкновенная\n"); 
        break; 
      case 'в' : 
        printf("выхухоль, водоплавающее существо\n"); 
        break; 
      case 'е' : 
        printf("ехидна, игольчатый муравьед\n"); 
        break; 
      case 'р' : 
        printf("рыболов, светло-коричневая куница\n"); 
        break; 
      default : 
        printf("Это трудная задача!\n"); 
      } /* конец оператора выбора*/ 
    else 
      printf("Распознаются только строчные буквы.\n"); 
    while (getchar() != '\n') 
      continue; /* пропустить оставшуюся часть входной строки*/ 
    printf("Введите следующую букву или # для завершения.\n"); 
  } /* конец цикла while */ 
  printf("Программа завершена.\n"); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 75.
Напишите программу, которая читает входные символы до тех пор, пока не встретится символ #, а затем отображает количество считанных пробелов, количество символов новой строки и количество всех других символов. 

Задание 76.
Напишите программу, которая читает входные символы до тех пор, пока не встретится символ #. Программа должна печатать каждый символ и его ASCII-код в десятичном представлении. Распечатайте выходные данные по восемь пар символ — код в строке. 

Подсказка.
Используйте счетчик символов и операцию деления по модулю(%) для печати символа новой строки для каждых восьми итераций цикла. 

Задание 77.
Напишите программу, которая читает целые числа до тех пор, пока при вводе не  встретится  0. Как  только  ввод  прекратится, программа  должна сообщить общее количество четных чисел во входных данных(за исключением 0), среднее количество четных чисел, общее количество нечетных чисел во входных данных и среднее значение нечетных чисел. 

Задание 78.
Используя операторы if else, напишите программу, которая читает входную последовательность символов, пока не встретится символ #, заменяет каждую точку  на  восклицательный  знак,  каждый  восклицательный  знак  в  исходном входном потоке — на два восклицательных знака, и сообщает в конце о количестве выполненных замен. 

Задание 79.
Напишите программу, которая читает входные символы до тех пор, пока не встретится символ #, и сообщает, сколько раз во входной последовательности символов встретилось сочетание ei.

Подсказка.
Эта программа должна “помнить” предыдущий символ, равно как и текущий символ. Проверьте ее на входной последовательности символов“Receive your eieio award”. 

Задание 80.
Напишите  программу, которая  в качестве входных данных принимает целое число, а затем выводит на экран все простые числа, которые меньше или равны введенному числу.

Тема 8. Символьный ввод-вывод и верификация ввода. 

Задание 81.
Скомпилируйте и выполните следующую программу echo.c:
--------------------------------------------------------------------------
/* повторяет вводимые символы*/ 
#include <stdio.h> 
int main(void){ 
  char ch; 
  while ((ch = getchar()) != '#') 
    putchar(ch); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 82.
Скомпилируйте и выполните следующую программу echo_eof.c:
--------------------------------------------------------------------------
/* повторяет ввод до момента достижения конца файла*/ 
#include <stdio.h> 
int main(void){ 
  int ch; 
  while ((ch = getchar()) != EOF) 
    putchar(ch); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 83.
Использование пеернаправления ввода и вывода.

echo_eof < words 
echo_eof > mywords
echo_eof < mywords > savewords 

Задание 84.
Скомпилируйте и выполните следующую программу guess.c:
--------------------------------------------------------------------------
/* неэффективное и ошибочное отгадывание числа */ 
#include <stdio.h> 
int main(void){ 
  int guess = 1; 
  printf("Выберите целое число в промежутке от 1 до 100. Я попробую отгадать"); 
  printf("его.\n Нажмите клавишуy, если моя догадка верна и"); 
  printf("\n клавишу n в противном случае.\n"); 
  printf("Вашим числом является %d?\n", guess); 
  while (getchar() != 'y') /* получить ответ, сравнить с y */ 
    printf("Итак, это будет %d?\n", ++guess); 
  printf("Я знал, что у меня получится!\n"); 
  return 0; 
}

/*
char response; 

while ((response = getchar()) != 'y') /* получить ответ*/ 
{ 
  if (response == 'n') 
    printf("Вашим числом является %d?\n", ++guess); 
  else 
    printf("К сожалению, я понимаю толькоy или n.\n"); 
  while (getchar() != '\n') 
    continue; /* пропустить оставшуюся часть строки*/ 
}
*/

--------------------------------------------------------------------------

Задание 85.
Скомпилируйте и выполните следующую программу showchar1.c:
--------------------------------------------------------------------------
/* программа с большой проблемой, связанной с вводом-выводом*/ 
#include <stdio.h> 
void display(char cr, int lines, int width); 
int main(void){ 
  int ch; /* символ, выводимый на печать*/ 
  int rows, cols; /* количество строк и столбцов*/ 
  printf("Введите символ и два целых числа:\n"); 
  while ((ch = getchar()) != '\n') 
  { 
    scanf("%d %d", &rows, &cols); 
    display(ch, rows, cols); 
    printf("Введите еще один символ и два целых числа;\n"); 
    printf("введите символ новой строки для завершения программы.\n"); 
  } 
  printf("Программа завершена.\n"); 
  return 0; 
} 

void display(char cr, int lines, int width){ 
  int row, col; 
  for (row = 1; row <= lines; row++){ 
    for (col = 1; col <= width; col++) 
      putchar(cr); 
    putchar('\n'); /* закончить строку и начать новую*/ 
  } 
}
--------------------------------------------------------------------------

Задание 86.
Скомпилируйте и выполните следующую программу showchar2.c:
--------------------------------------------------------------------------
/* печатает символы в строках и столбцах */ 
#include <stdio.h> 
void display(char cr, int lines, int width); 
int main(void){ 
  int ch; /* символ, выводимый на печать*/ 
  int rows, cols; /* количество строк и столбцов*/ 
  printf("Введите символ и два целых числа:\n"); 
  while ((ch = getchar()) != '\n') 
  { 
    if (scanf("%d %d",&rows, &cols) != 2) 
      break; 
    display(ch, rows, cols); 
    while (getchar() != '\n') 
      continue; 
    printf("Введите еще один символ и два целых числа;\n"); 
    printf("введите символ новой строки для завершения программы.\n"); 
  } 
  printf("Программа завершена.\n"); 
  return 0; 
} 

void display(char cr, int lines, int width){ 
  int row, col; 
  for (row = 1; row <= lines; row++){ 
    for (col = 1; col <= width; col++) 
      putchar(cr); 
    putchar('\n'); /* закончить строку и начать новую*/ 
  } 
}
--------------------------------------------------------------------------

Задание 87.
Скомпилируйте и выполните следующую программу checking.c:
--------------------------------------------------------------------------
/* проверка допустимости ввода*/ 
#include <stdio.h> 
#include <stdbool.h> 
// проверка, является ли вводимое значение целым числом
int get_int(void); 
// проверка, являются ли границы диапазона допустимыми
bool bad_limits(int begin, int end, int low, int high); 
// вычисление суммы квадратов целых чисел от a до b 
double sum_squares(int a, int b); 

int main(void){ 
  const int MIN = -1000; // нижняя граница диапазона
  const int MAX = +1000; // верхняя граница диапазона
  int start; // начало диапазона
  int stop; // конец диапазона
  double answer; 
  printf("Эта программа вычисляет сумму квадратов" 
         "целых чисел в заданном диапазоне.\nНижняя граница не должна" 
		 "быть меньше –1000, \nа верхняя- " 
		 "больше +1000.\nВведите значения границ диапазона(введите 0 для" 
		 "обеих границ для завершения программы):\n нижняя граница: "); 
  start = get_int(); 
  printf("верхняя граница: "); 
  stop = get_int(); 
  while (start !=0 || stop != 0) 
  { 
    if (bad_limits(start, stop, MIN, MAX)) 
      printf("Пожалуйста, повторите попытку.\n"); 
    else 
    { 
      answer = sum_squares(start, stop); 
      printf("Сумма квадратов целых чисел"); 
      printf("от%d до%d равна%g\n", start, stop, answer); 
    } 
    printf("Введите значения границ диапазона(введите 0 для" 
		   "обеих границ для завершения программы):\n"); 
	printf("нижняя граница: "); 
    start = get_int(); 
    printf("верхняя граница: "); 
    stop = get_int(); 
  } 
  printf("Программа завершена.\n"); 
  return 0; 
} 

int get_int(void){ 
  int input; 
  char ch;
  while (scanf("%d", &input) != 1) 
  { 
    while ((ch = getchar()) != '\n') 
      putchar(ch); // удаление неправильных входных данных
    printf(" не является целочисленным.\nПожалуйста, введите"); 
    printf("целое число, такое как 25, -178 или 3: "); 
  } 
  return input; 
} 

double sum_squares(int a, int b){ 
  double total = 0; 
  int i; 
  for (i = a; i <= b; i++) 
    total += i * i; 
  return total; 
} 

bool bad_limits(int begin, int end, int low, int high){ 
  bool not_good = false; 
  if (begin > end){ 
    printf("%d не меньше%d.\n", begin, end); 
  not_good = true; 
  } 
  if (begin < low || end < low){ 
    printf("Значения должны быть равными%d или больше.\n", low); 
    not_good = true; 
  } 
  if (begin > high || end > high){ 
    printf("Значения должны быть равными%d или меньше.\n", high); 
    not_good = true; 
  } 
  return not_good; 
} 
--------------------------------------------------------------------------

Задание 88.
Скомпилируйте и выполните следующую программу menuette.c:
--------------------------------------------------------------------------
/* технология меню */ 
#include <stdio.h> 
char get_choice(void); 
char get_first(void); 
int get_int(void); 
void count(void); 

int main(void){ 
  int choice; 
  void count(void); 
  while ( (choice = get_choice()) != 'в'){ 
    switch (choice) 
    { 
      case 'с' : printf("Покупайте дешево, продавайте дорого.\n"); 
			     break; 
	  case 'з' : putchar('\a'); /* ANSI */ 
		   	     break; 
	  case 'п' : count(); 
			     break; 
	  default :  printf("Программная ошибка!\n"); 
		         break; 
    } 
  } 
  printf("Всего хорошего.\n"); 
  return 0; 
} 
void count(void){ 
  int n,i; 
  printf("Считать до какого предела? Введите целое число:\n"); 
  n = get_int(); 
  for (i = 1; i <= n; i++) 
    printf("%d\n", i); 
  while ( getchar() != '\n') 
    continue; 
} 

char get_choice(void){ 
  int ch; 
  printf("Введите букву выбранного варианта:\n"); 
  printf("с. совет  з. звонок\n"); 
  printf("п. подсчет  в. выход\n"); 
  ch = get_first(); 
  while (ch != 'с' && ch != 'з' && ch != 'п' && ch != 'в'){ 
    printf("Выберите с, з, п или в.\n"); 
    ch = get_first(); 
  } 
  return ch; 
} 

char get_first(void){ 
  int ch; 
  ch = getchar(); 
  while (getchar() != '\n') 
    continue; 
  return ch; 
} 

int get_int(void){ 
  int input; 
  char ch; 
  while (scanf("%d", &input) != 1){ 
    while ((ch = getchar()) != '\n') 
      putchar(ch); // удалить неправильный вывод
    printf(" не является целочисленным.\n Пожалуйста, введите"); 
    printf("целое число, такое как 25, -178 или 3: "); 
  } 
  return input; 
}
--------------------------------------------------------------------------

Задание 89.
Напишите программу, которая подсчитывает количество символов при их вводе до достижения конца файла. 

Задание 90.
Напишите программу, которая воспринимает входные данные как поток символов и читает их до тех пор, пока не встретит символ EOF. Заставьте программу распечатывать каждый входной символ и его десятичное значение. Обратите внимание на то, что в последовательности ASCII символу пробела предшествуют непечатаемые символы. Примените к ним специальную обработку. Если непечатаемым символом является символ новой строки или символ табуляции, печатайте, соответственно, \n или \t. В противном случае, воспользуйтесь для обозначения символами управления. Например, ASCII 1 — это <Ctrl+A>, который может отображаться как ^A. Обратите внимание, что ASCII-значение для символа A представляет собой значение <Ctrl+A> плюс 64. Аналогичное отношение выполняется и для других непечатаемых символов. Печатайте по 10 пар в строке, но начинайте печать с новой строки всякий раз, когда встречается символ новой строки. 

Задание 91.
Напишите программу, которая считывает входные данные как поток символов, пока не встретит символ EOF. Сделайте так, чтобы программа отдельно сообщала о количестве букв верхнего регистра и количестве букв нижнего регистра. Можете предположить, что числовые значения букв нижнего регистра образуют непрерывную последовательность, это же вы можете предположить и в отношении букв верхнего регистра. Либо можете воспользоваться функциями из библиотеки ctype.h, выполняющими соответствующую классификацию символов, в этом случае уровень переносимости программы будет увеличен. 

Задание 92.
Внесите в программу угадывания чисел изменения, которые реализуют более интеллектуальную стратегию. Например, пусть программа сначала предложит число 50, и спросит, отклонился ли этот вариант от задуманного числа в большую сторону, в меньшую сторону или же число угадано. Если, скажем, предположение меньше задуманного числа, следующая попытка угадать число производится в диапазоне от 50 до 100, то есть 75. Если  же  предположение  больше  задуманного  числа, следующая  попытка производится в середине диапазона чисел от 75 до 50 и так далее. Используя стратегию бинарного поиска, программа быстро находит правильный ответ, конечно, если пользователь не вводит ее в заблуждение. 

--------------------------------------------------------------------------
/* неэффективное и ошибочное отгадывание числа */ 
#include <stdio.h> 
int main(void){ 
  int guess = 1; 
  printf("Выберите целое число в промежутке от 1 до 100. Я попробую отгадать"); 
  printf("его.\n Нажмите клавишуy, если моя догадка верна и"); 
  printf("\n клавишу n в противном случае.\n"); 
  printf("Вашим числом является %d?\n", guess); 
  while (getchar() != 'y') /* получить ответ, сравнить с y */ 
    printf("Итак, это будет %d?\n", ++guess); 
  printf("Я знал, что у меня получится!\n"); 
  return 0; 
}

/*
char response; 

while ((response = getchar()) != 'y') /* получить ответ*/ 
{ 
  if (response == 'n') 
    printf("Вашим числом является %d?\n", ++guess); 
  else 
    printf("К сожалению, я понимаю толькоy или n.\n"); 
  while (getchar() != '\n') 
    continue; /* пропустить оставшуюся часть строки*/ 
}
*/

--------------------------------------------------------------------------

Задание 93.
Внесите изменения в функцию get_first() с таким расчетом, чтобы она возвращала первый встреченный ею непробельный символ. Проверьте ее в какой-нибудь простой программе. 

--------------------------------------------------------------------------
char get_first(void){ 
  int ch; 
  ch = getchar(); 
  while (getchar() != '\n') 
    continue; 
  return ch; 
} 
--------------------------------------------------------------------------

Тема 9. Функции.

Задание 94.
Скомпилируйте и выполните следующую программу lethead1.c:
--------------------------------------------------------------------------
#include <stdio.h> 
#define NAME "GIGATHINK, INC." 
#define ADDRESS "101 Megabuck Plaza" 
#define PLACE "Megapolis, CA 94904" 
#define WIDTH 40 
void starbar(void); /* прототип функции*/ 
int main(void){ 
  starbar(); 
  printf("%s\n", NAME); 
  printf("%s\n", ADDRESS); 
  printf("%s\n", PLACE); 
  starbar(); /* использование функции*/ 
  return 0; 
} 

void starbar(void) /* определение функции*/ 
{ 
  int count; 
  for (count = 1; count <= WIDTH; count++) 
    putchar('*'); 
  putchar('\n'); 
}
--------------------------------------------------------------------------

Задание 95.
Скомпилируйте и выполните следующую программу lethead2.c:
--------------------------------------------------------------------------
#include <stdio.h> 
#include <string.h> /* для функции strlen() */ 
#define NAME "GIGATHINK, INC." 
#define ADDRESS "101 Megabuck Plaza" 
#define PLACE "Megapolis, CA 94904" 
#define WIDTH 40 
#define SPACE ' ' 
void show_n_char(char ch, int num); 
int main(void){ 
  int spaces; 
  show_n_char('*', WIDTH); /* использование констант в качестве аргументов*/ 
  putchar('\n'); 
  show_n_char(SPACE, 12); /* использование констант в качестве аргументов*/ 
  printf("%s\n", NAME); 
  spaces = (WIDTH - strlen(ADDRESS)) / 2; 
  /* Пусть программа вычислит, */ 
  /* сколько пробелов пропустить*/ 
  show_n_char(SPACE, spaces); /* использование переменной в качестве аргумента*/ 
  printf("%s\n", ADDRESS); 
  show_n_char(SPACE, (WIDTH - strlen(PLACE)) / 2); 
  /* выражение в качестве аргумента*/ 
  printf("%s\n", PLACE); 
  show_n_char('*', WIDTH); 
  putchar('\n'); 
  return 0; 
} 
/* определение функцииshow_n_char()*/ 
void show_n_char(char ch, int num){ 
  int count; 
  for (count = 1; count <= num; count++) 
    putchar(ch); 
} 
--------------------------------------------------------------------------

Задание 96.
Скомпилируйте и выполните следующую программу lesser.c:
--------------------------------------------------------------------------
/* из двух зол она выбирает меньшую */ 
#include <stdio.h> 
int imin(int, int); 
int main(void){ 
  int evil1, evil2; 
  printf("Введите два целых числа(или q для завершения программы):\n"); 
  while (scanf("%d %d", &evil1, &evil2) == 2) 
  { 
    printf("Меньшим из двух чисел %d и %d является %d.\n", 
    evil1, evil2, imin(evil1,evil2)); 
    printf("Введите два целых числа(илиq для завершения программы):\n"); 
  } 
  printf("Программа завершена.\n"); 
  return 0; 
} 
int imin(int n,int m){ 
  int min;
  if (n < m) 
    min = n; 
  else 
    min = m; 
  return min; 
} 
--------------------------------------------------------------------------

Задание 97.
Скомпилируйте и выполните следующую программу recur.c:
--------------------------------------------------------------------------
/* иллюстрация рекурсии */ 
#include <stdio.h> 
void up_and_down(int); 
int main(void){ 
  up_and_down(1); 
  return 0; 
} 
void up_and_down(int n){ 
  printf("Уровень %d: ячейка n %p\n", n, &n); /* 1 */ 
  if (n < 4) 
    up_and_down(n+1); 
  printf("УРОВЕНЬ %d: ячейка n %p\n", n, &n); /* 2 */ 
}
--------------------------------------------------------------------------

Задание 98.
Скомпилируйте и выполните следующую программу factor.c:
--------------------------------------------------------------------------
// использует циклы и рекурсию для вычисления факториала
#include <stdio.h> 
long fact(int n); 
long rfact(int n); 
int main(void)
{ 
  int num; 
  printf("Эта программа вычисляет факториалы.\n"); 
  printf("Введите значение в диапазоне 0-12 (или q для завершения программы):\n"); 
  while (scanf("%d", &num) == 1){ 
    if (num < 0) 
      printf("Пожалуйста, не вводите отрицательные числа.\n"); 
    else if (num > 12) 
      printf("Входное значение должно быть меньше 13.\n"); 
    else{ 
      printf("цикл: факториал %d = %ld\n", num, fact(num)); 
      printf("рекурсия: факториал %d = %ld\n", num, rfact(num)); 
    } 
    printf("Введите значение в диапазоне 0-12 (или q для завершения программы):\n"); 
  } 
  printf("Всего хорошего.\n"); 
  return 0; 
} 

long fact(int n) // функция на базе цикла
{ 
  long ans; 
  for (ans = 1; n > 1; n--) 
    ans *= n; 
  return ans; 
}

long rfact(int n) // рекурсивная версия
{ 
  long ans; 
  if (n > 0) 
    ans= n * rfact(n-1); 
  else 
    ans = 1; 
  return ans; 
} 
--------------------------------------------------------------------------
Задание 99.
Скомпилируйте и выполните следующую программу binary.c:
--------------------------------------------------------------------------
/* печатает целые числа в двоичной форме */ 
#include <stdio.h> 
void to_binary(unsigned long n); 
int main(void){ 
  unsigned long number; 
  printf("Введите целое число(илиq для завершения программы):\n"); 
  while (scanf("%ul", &number) == 1) 
  { 
    printf("Двоичный эквивалент: "); 
    to_binary(number); 
    putchar('\n'); 
    printf("Введите целое число(или q для завершения программы):\n"); 
  } 
  printf("Программа завершена.\n"); 
  return 0; 
} 

void to_binary(unsigned long n) /* рекурсивная функция*/ 
{ 
  int r; 
  r = n % 2; 
  if (n >= 2) 
    to_binary(n / 2); 
  putchar('0' + r); 
  return; 
} 
--------------------------------------------------------------------------

Задание 100.
Скомпилируйте и выполните следующую программу usehotel:

gcc usehotel.c hotel.c -o usehotel

--------------------------------------------------------------------------
/* usehotel.c -- программа определения класса гостиничных номеров*/ 
#include <stdio.h> 
#include "hotel.h" /* определяет константы, объявляет функции*/ 
int main(void){ 
  int nights; 
  double hotel_rate; 
  int code; 
  while ((code = menu()) != QUIT) 
  { 
    switch(code) 
    { 
      case 1 : hotel_rate = HOTEL1;
               break; 
      case 2 : hotel_rate = HOTEL2; 
			   break; 
	  case 3 : hotel_rate = HOTEL3; 
			   break; 
	  case 4 : hotel_rate = HOTEL4; 
			   break; 
	  default: hotel_rate = 0.0; 
		       printf("Ошибка!\n"); 
		       break; 
	} 
	nights = getnights(); 
	showprice(hotel_rate, nights); 
  } 
  printf("Благодарим за использование и желаем успехов."); 
  return 0; 
}
--------------------------------------------------------------------------
/* hotel.c -- функции управления отелем */ 
#include <stdio.h> 
#include "hotel.h" 
int menu(void){ 
  int code, status; 
  printf("\n%s%s\n", STARS, STARS); 
  printf("Введите число, соответствующее выбранному отелю:\n"); 
  printf("1) Fairfield Arms 2) Hotel Olympic\n"); 
  printf("3) Chertworthy Plaza 4) The Stockton\n"); 
  printf("5) выход\n"); 
  printf("%s%s\n", STARS, STARS); 
  while ((status = scanf("%d", &code)) != 1 || (code < 1 || code > 5)) 
  { 
    if (status != 1) 
      scanf("%*s"); 
    printf("Пожалуйста, введите целое число от 1 до 5.\n"); 
  } 
  return code; 
} 

int getnights(void){ 
  int nights; 
  printf("На сколько суток вы резервируете номер? "); 
  while (scanf("%d", &nights) != 1) 
  { 
    scanf("%*s"); 
    printf("Пожалуйста, введите целое число, такое как 2.\n"); 
  } 
  return nights; 
} 
void showprice(double rate, int nights){ 
  int n; 
  double total = 0.0; 
  double factor = 1.0; 
  for (n = 1; n <= nights; n++, factor *= DISCOUNT) 
    total += rate * factor; 
  printf("Общая стоимость составляет$%0.2f.\n", total); 
}
--------------------------------------------------------------------------
/* hotel.h -- константы и объявления для программы hotel.c */ 
#define QUIT 5 
#define HOTEL1 80.00 
#define HOTEL2 125.00 
#define HOTEL3 155.00 
#define HOTEL4 200.00 
#define DISCOUNT 0.95 
#define STARS "**********************************" 
// показывает список возможных вариантов
int menu(void); 
// возвращает количество суток, на которое резервируется номер
int getnights(void); 
// вычисляет стоимость с учетом тарифов и количества суток
// и отображает результат вычислений
void showprice(double rate, int nights);
--------------------------------------------------------------------------

Задание 101.
Скомпилируйте и выполните следующую программу loccheck.c:
--------------------------------------------------------------------------
/* проверка с целью выяснения, где хранятся переменные */ 
#include <stdio.h> 
void mikado(int); /* объявление функции*/ 
int main(void){ 
  int pooh = 2, bah = 5; /* переменные, локальные в функцииmain() */ 
  printf("В функции main() pooh = %d и &pooh = %p\n", pooh, &pooh); 
  printf("В функции main() bah = %d и &bah = %p\n", bah, &bah); 
  mikado(pooh); 
  return 0; 
} 

void mikado(int bah) /* объявление функции*/ 
{ 
  int pooh = 10; /* переменные, локальные в функции mikado() */ 
  printf("В функции mikado() pooh = %d и &pooh = %p\n", pooh, &pooh); 
  printf("В функции mikado() bah = %d и &bah = %p\n", bah, &bah); 
}
--------------------------------------------------------------------------

Задание 102.
Скомпилируйте и выполните следующую программу swap1.c:
--------------------------------------------------------------------------
/* первая попытка создания функции обмена значениями*/ 
#include <stdio.h> 
void interchange(int u, int v); /* объявление функции*/ 
int main(void){ 
  int x = 5, y = 10; 
  printf("Первоначально x = %d и y = %d.\n", x , y); 
  interchange(x, y); 
  printf("Теперь x = %d и y = %d.\n", x, y); 
  return 0; 
}
void interchange(int u, int v) /* объявление функции*/ 
{ 
  int temp; 
  temp = u; 
  u = v; 
  v = temp; 
}
--------------------------------------------------------------------------

Задание 103.
Скомпилируйте и выполните следующую программу swap2.c:
--------------------------------------------------------------------------
/* пересмотренный вариант программы swap1.c */ 
#include <stdio.h> 
void interchange(int u, int v); 
int main(void) 
{ 
  int x = 5, y = 10; 
  printf("Первоначально x = %d иy = %d.\n", x , y); 
  interchange(x, y); 
  printf("Теперьx = %d иy = %d.\n", x, y); 
  return 0; 
} 
void interchange(int u, int v) 
{ 
  int temp; 
  printf("Первоначально u = %d и v = %d.\n", u , v); 
  temp = u; 
  u = v; 
  v = temp; 
  printf("Теперь u = %d и v = %d.\n", u, v); 
}
--------------------------------------------------------------------------

Задание 104.
Скомпилируйте и выполните следующую программу swap3.c:
--------------------------------------------------------------------------
/* использование указателей для обмена значениями переменных*/ 
#include <stdio.h> 
void interchange(int * u, int * v); 
int main(void){ 
  int x = 5, y = 10; 
  printf("Первоначально x = %d и y = %d.\n", x, y); 
  interchange(&x, &y); /* передача адресов в функцию*/ 
  printf("Теперь x = %d и y = %d.\n", x, y); 
  return 0; 
} 
void interchange(int * u, int * v){ 
  int temp; 
  temp = *u; /*переменная temp получает значение, на которое указывает u*/ 
  *u = *v; 
  *v = temp; 
}
--------------------------------------------------------------------------

Задание 105.
Напишите функцию с именем min(x,y), которая возвращает меньшее из двух значений типа double. Протестируйте эту функцию. 

Задание 106.
Напишите  функцию  с  именем  chline(ch,i,j), которая  печатает  требуемый символ в столбцах от i до j. Протестируйте эту функцию. 

Задание 107.
Напишите функцию, которая принимает три аргумента: символ и два целых числа. Символ должен быть распечатан в строке. Первое целое значение определяет, сколько раз символ печатается в строке, а второе целое число задает, сколько  строк  должно  быть  распечатано.  Напишите  программу, которая  использует эту функцию. 

Задание 108.
Среднее гармоническое значение двух чисел может быть получено, если взять обратные величины этих двух чисел, вычислить их среднее значение и взять его обратную величину. Напишите функцию, которая берет два аргумента типа double и возвращает среднее гармоническое значение этих двух чисел. 

Задание 109.
Напишите и протестируйте функцию с именем larger_of(), которая заменяет содержимое двух переменных типа double большим из двух этих значений. Например, функция larger_of(x,y) присвоит обеим переменным x и y большее из двух этих значений. 

Тема 10. Массивы и указатели.

Задание 110.
Скомпилируйте и выполните следующую программу day_mon1.c:
--------------------------------------------------------------------------
/* выводит на печать количество дней каждого месяца */ 
#include <stdio.h> 
#define MONTHS 12 
int main(void){ 
  int days[MONTHS] = {31,28,31,30,31,30,31,31,30,31,30,31}; 
  int index; 
  for (index = 0; index < MONTHS; index++) 
    printf("Месяц%d имеет%2d дней(день).\n", index + 1, days[index]); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 111.
Скомпилируйте и выполните следующую программу day_mon2.c:
--------------------------------------------------------------------------
/* компилятор сам подсчитывает количество элементов*/ 
#include <stdio.h> 
int main(void){ 
  const int days[] = {31,28,31,30,31,30,31,31,30,31}; 
  int index; 
  for (index = 0; index < sizeof days / sizeof days[0]; index++) 
    printf("Месяц%2d имеет%d дней(день).\n", index +1, days[index]); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 112.
Скомпилируйте и выполните следующую программу rain.c:
--------------------------------------------------------------------------
/* вычисляет итоговые данные по годам, ежегодные средние значения и ежемесячные средние значения осадков за период в несколько лет*/ 
#include <stdio.h> 
#define MONTHS 12 // количество месяцев в году
#define YEARS 5 // количество лет, в течение которых проводились наблюдения
int main(void) 
{ 
  // инициализация массива данными об осадках за период с 2000 по 2004 
  const float rain[YEARS][MONTHS] = { 
	{4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6}, 
	{8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3}, 
	{9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4}, 
	{7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2}, 
	{7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2} 
  }; 
  int year, month; 
  float subtot, total; 
  printf(" ГОД КОЛИЧЕСТВО ОСАДКОВ(в дюймах)\n"); 
  for (year = 0, total = 0; year < YEARS; year++) 
  { // для каждого года суммарное количество осадков за каждый месяц
    for (month = 0, subtot = 0; month < MONTHS; month++) 
      subtot += rain[year][month]; 
    printf("%5d %15.1f\n", 2000 + year, subtot); 
    total += subtot; // общая сумма за все годы
  } 
  printf("\n Среднегодовое количество осадков составляет %.1f дюймов.\n\n", total/YEARS); 
  printf("СРЕДНЕМЕСЯЧНОЕ КОЛИЧЕСТВО ОСАДКОВ:\n\n"); 
  printf(" Янв Фев Мар Апр Май Июн Июл Авг Сен Окт"); 
  printf(" Ноя Дек\n"); 
  for (month = 0; month < MONTHS; month++) 
  { // суммарные осадки по каждому месяцу на протяжении всего периода
    for (year = 0, subtot =0; year < YEARS; year++) 
      subtot += rain[year][month]; 
    printf("%4.1f ", subtot/YEARS); 
  } 
  printf("\n"); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 113.
Скомпилируйте и выполните следующую программу pnt_add.c:
--------------------------------------------------------------------------
// сложение указателей
#include <stdio.h> 
#define SIZE 4 
int main(void){ 
  short dates [SIZE]; 
  short * pti; 
  short index; 
  double bills[SIZE]; 
  double * ptf; 
  pti = dates; // назначение указателю адреса массива
  ptf = bills; 
  printf("%23s %10s\n", "short", "double"); 
  for (index = 0; index < SIZE; index ++) 
    printf("указатели+ %d: %10p %10p\n", index, pti + index, ptf + index); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 114.
Скомпилируйте и выполните следующую программу day_mon3.c:
--------------------------------------------------------------------------
/* используются обозначения через указатели*/ 
#include <stdio.h> 
#define MONTHS 12 
int main(void){ 
  int days[MONTHS] = {31,28,31,30,31,30,31,31,30,31,30,31}; 
  int index; 
  for (index = 0; index < MONTHS; index++) 
    printf("Месяц%2d имеет%d дней(ltym).\n", index +1, *(days + index)); // то же, что и days[index] 
  return 0; 
}
--------------------------------------------------------------------------

Задание 115.
Скомпилируйте и выполните следующую программу sum_arr1.c:
--------------------------------------------------------------------------
// сумма элементов массива
// используйте спецификаторы %u или %lu, если спецификатор %zd не работает
#include <stdio.h> 
#define SIZE 10 
int sum(int ar[], int n); 
int main(void){ 
  int marbles[SIZE] = {20,10,5,39,4,16,19,26,31,20}; 
  long answer; 
  answer = sum(marbles, SIZE); 
  printf("Общая сумма элементов массиваmarbles равна %ld.\n", answer); 
  printf("Объем памяти, отведенной под массив marbles, составляет %zd байт.\n", sizeof marbles); 
  return 0; 
} 

int sum(int ar[], int n) // каков размер массива? 
{ 
  int i; 
  int total = 0; 
  for( i = 0; i < n; i++) 
    total += ar[i]; 
  printf("Размер переменной ar составляет %zd байт.\n", sizeof ar); 
  return total; 
}
--------------------------------------------------------------------------

Задание 116.
Скомпилируйте и выполните следующую программу sum_arr2.c:
--------------------------------------------------------------------------
/* суммирует элементы массива*/ 
#include <stdio.h> 
#define SIZE 10 
int sump(int * start, int * end); 
int main(void){ 
  int marbles[SIZE] = {20,10,5,39,4,16,19,26,31,20}; 
  long answer; 
  answer = sump(marbles, marbles + SIZE); 
  printf("Общее количество элементов marbles равно %ld.\n", answer); 
  return 0; 
} 
/* использование арифметики указателей*/ 
int sump(int * start, int * end){ 
  int total = 0; 
  while (start < end) 
  { 
    total += *start; /* добавить значение к total */ 
    start++; /* переместить указатель на следующий элемент*/ 
  } 
  return total; 
} 
--------------------------------------------------------------------------

Задание 117.
Скомпилируйте и выполните следующую программу ptr_ops.c:
--------------------------------------------------------------------------
// операции над указателями
#include <stdio.h> 
int main(void){ 
  int urn[5] = {100,200,300,400,500}; 
  int * ptr1, * ptr2, *ptr3; 
  ptr1 = urn; // присваивание указателю адреса
  ptr2 = &urn[2]; // второй экземпляр
  // разыменование указателя и взятие
  // адреса указателя
  printf("значение указателя, разыменованный указатель, адрес указателя:\n"); 
  printf("ptr1 = %p, *ptr1 =%d, &ptr1 = %p\n", ptr1, *ptr1, &ptr1); 
  // сложение указателей
  ptr3 = ptr1 + 4; 
  printf("\n сложение значенияint с указателем:\n"); 
  printf("ptr1 + 4 = %p, *(ptr4 + 3) = %d\n", ptr1 + 4, *(ptr1 + 3)); 
  ptr1++; // увеличение значение указателя на1 
  printf("\nзначения после выполнения операции ptr1++:\n"); 
  printf("ptr1 = %p, *ptr1 =%d, &ptr1 = %p\n", ptr1, *ptr1, &ptr1); 
  ptr2--; // уменьшение значение указателя на 1 
  printf("\nзначения после выполнения операции --ptr2:\n"); 
  printf("ptr2 = %p, *ptr2 = %d, &ptr2 = %p\n", ptr2, *ptr2, &ptr2); 
  --ptr1; // восстановление исходного значения
  ++ptr2; // восстановление исходного значения
  printf("\nвосстановление исходных значений указателей:\n"); 
  printf("ptr1 = %p, ptr2 = %p\n", ptr1, ptr2); 
  // вычитание одного указателя из другого
  printf("\nвычитание одного указателя из другого:\n"); 
  printf("ptr2 = %p, ptr1 = %p, ptr2 - ptr1 = %d\n", ptr2, ptr1, ptr2 - ptr1); 
  // вычитание целого значения из указателя
  printf("\nвычитание из указателя значения типа int:\n"); 
  printf("ptr3 = %p, ptr3 - 2 = %p\n", ptr3, ptr3 - 2); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 118.
Скомпилируйте и выполните следующую программу arf.c:
--------------------------------------------------------------------------
/* функции, манипулирующие массивами*/ 
#include <stdio.h> 
#define SIZE 5 
void show_array(const double ar[], int n); 
void mult_array(double ar[], int n, double mult); 
int main(void){ 
  double dip[SIZE] = {20.0, 17.66, 8.2, 15.3, 22.22}; 
  printf("Исходный массив dip:\n"); 
  show_array(dip, SIZE); 
  mult_array(dip, SIZE, 2.5); 
  printf("Массив dip после вызова функции mult_array():\n"); 
  show_array(dip, SIZE); 
  return 0; 
} 
/* выводит содержимое массива*/ 
void show_array(const double ar[], int n){ 
  int i; 
  for (i = 0; i < n; i++) 
    printf("%8.3f ", ar[i]); 
  putchar('\n'); 
} 
/* умножает каждый элемент массива на один и тот же множитель*/ 
void mult_array(double ar[], int n, double mult){ 
  int i; 
  for (i = 0; i < n; i++) 
    ar[i] *= mult; 
} 
--------------------------------------------------------------------------

Задание 119.
Скомпилируйте и выполните следующую программу zippo1.c:
--------------------------------------------------------------------------
/* информация о массиве zippo */ 
#include <stdio.h> 
int main(void){ 
  int zippo[4][2] = { {2,4}, {6,8}, {1,3}, {5, 7} }; 
  printf(" zippo = %p, zippo + 1 = %p\n", zippo, zippo + 1); 
  printf("zippo[0] = %p, zippo[0] + 1 = %p\n", zippo[0], zippo[0] + 1); 
  printf(" *zippo = %p, *zippo + 1 = %p\n", *zippo, *zippo + 1); 
  printf("zippo[0][0] = %d\n", zippo[0][0]); 
  printf(" *zippo[0] = %d\n", *zippo[0]); 
  printf(" **zippo = %d\n", **zippo); 
  printf(" zippo[2][1] = %d\n", zippo[2][1]); 
  printf("*(*(zippo+2) + 1) = %d\n", *(*(zippo+2) + 1)); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 120.
Скомпилируйте и выполните следующую программу zippo2.c:
--------------------------------------------------------------------------
/* получение информации о массивеzippo с помощью переменной типа указатель*/ 
#include <stdio.h> 
int main(void) { 
  int zippo[4][2] = { {2,4}, {6,8}, {1,3}, {5, 7} }; 
  int (*pz)[2]; 
  pz = zippo; 
  printf(" pz = %p, pz + 1 = %p\n", pz, pz + 1); 
  printf("pz[0] = %p, pz[0] + 1 = %p\n", pz[0], pz[0] + 1); 
  printf(" *pz = %p, *pz + 1 = %p\n", *pz, *pz + 1); 
  printf("pz[0][0] = %d\n", pz[0][0]); 
  printf(" *pz[0] = %d\n", *pz[0]); 
  printf(" **pz = %d\n", **pz); 
  printf(" pz[2][1] = %d\n", pz[2][1]); 
  printf("*(*(pz+2) + 1) = %d\n", *(*(pz+2) + 1)); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 121.
Скомпилируйте и выполните следующую программу array2d.c:
--------------------------------------------------------------------------
// функции для двумерных массивов
#include <stdio.h> 
#define ROWS 3 
#define COLS 4 
void sum_rows(int ar[][COLS], int rows); 
void sum_cols(int [][COLS], int ); // можно опустить имена
int sum2d(int (*ar)[COLS], int rows); // другой вид синтаксиса
int main(void){ 
  int junk[ROWS][COLS] = { 
	{2,4,6,8}, 
	{3,5,7,9}, 
	{12,10,8,6} 
  };
  sum_rows(junk, ROWS); 
  sum_cols(junk, ROWS); 
  printf("Сумма всех элементов= %d\n", sum2d(junk, ROWS)); 
  return 0; 
} 
void sum_rows(int ar[][COLS], int rows){ 
  int r; 
  int c; 
  int tot; 
  for (r = 0; r < rows; r++) 
  { 
    tot = 0; 
    for (c = 0; c < COLS; c++) 
      tot += ar[r][c]; 
    printf("строка%d: сумма= %d\n", r, tot); 
  } 
} 

void sum_cols(int ar[][COLS], int rows){ 
  int r; 
  int c; 
  int tot; 
  for (c = 0; c < COLS; c++) 
  { 
    tot = 0; 
    for (r = 0; r < rows; r++) 
      tot += ar[r][c]; 
    printf("столбец%d: сумма= %d\n", c, tot); 
 } 
} 

int sum2d(int ar[][COLS], int rows){ 
  int r; 
  int c; 
  int tot = 0; 
  for (r = 0; r < rows; r++) 
    for (c = 0; c < COLS; c++) 
      tot += ar[r][c]; 
  return tot; 
}
--------------------------------------------------------------------------

Задание 122.
Внесите изменения в программу rain с таким расчетом, чтобы она выполняла вычисления, используя указатели вместо индексов массивов, и основные задачи выполнялись соответствующими функциями.

--------------------------------------------------------------------------
/* вычисляет итоговые данные по годам, ежегодные средние значения и ежемесячные средние значения осадков за период в несколько лет*/ 
#include <stdio.h> 
#define MONTHS 12 // количество месяцев в году
#define YEARS 5   // количество лет, в течение которых проводились наблюдения
int main(void) 
{ 
  // инициализация массива данными об осадках за период с 2000 по 2004 
  const float rain[YEARS][MONTHS] = { 
	{4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6}, 
	{8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3}, 
	{9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4}, 
	{7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2}, 
	{7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2} 
  }; 
  int year, month; 
  float subtot, total; 
  printf(" ГОД КОЛИЧЕСТВО ОСАДКОВ(в дюймах)\n"); 
  for (year = 0, total = 0; year < YEARS; year++) 
  { // для каждого года суммарное количество осадков за каждый месяц
    for (month = 0, subtot = 0; month < MONTHS; month++) 
      subtot += rain[year][month]; 
    printf("%5d %15.1f\n", 2000 + year, subtot); 
    total += subtot; // общая сумма за все годы
  } 
  printf("\n Среднегодовое количество осадков составляет %.1f дюймов.\n\n", total/YEARS); 
  printf("СРЕДНЕМЕСЯЧНОЕ КОЛИЧЕСТВО ОСАДКОВ:\n\n"); 
  printf(" Янв Фев Мар Апр Май Июн Июл Авг Сен Окт"); 
  printf(" Ноя Дек\n"); 
  for (month = 0; month < MONTHS; month++) 
  { // суммарные осадки по каждому месяцу на протяжении всего периода
    for (year = 0, subtot =0; year < YEARS; year++) 
      subtot += rain[year][month]; 
    printf("%4.1f ", subtot/YEARS); 
  } 
  printf("\n"); 
  return 0; 
} 
--------------------------------------------------------------------------

Задание 123.
Напишите функцию, которая возвращает наибольшее значение из массива значений типа int. Протестируйте эту функцию с помощью простой программы. 

Подсказка.
Можно воспользоваться следующими примерами.
--------------------------------------------------------------------------
// сумма элементов массива
// используйте спецификаторы %u или %lu, если спецификатор %zd не работает
#include <stdio.h> 
#define SIZE 10 
int sum(int ar[], int n); 
int main(void){ 
  int marbles[SIZE] = {20,10,5,39,4,16,19,26,31,20}; 
  long answer; 
  answer = sum(marbles, SIZE); 
  printf("Общая сумма элементов массиваmarbles равна %ld.\n", answer); 
  printf("Объем памяти, отведенной под массив marbles, составляет %zd байт.\n", sizeof marbles); 
  return 0; 
} 

int sum(int ar[], int n) // каков размер массива? 
{ 
  int i; 
  int total = 0; 
  for( i = 0; i < n; i++) 
    total += ar[i]; 
  printf("Размер переменной ar составляет %zd байт.\n", sizeof ar); 
  return total; 
}
--------------------------------------------------------------------------

--------------------------------------------------------------------------
/* суммирует элементы массива*/ 
#include <stdio.h> 
#define SIZE 10 
int sump(int * start, int * end); 
int main(void){ 
  int marbles[SIZE] = {20,10,5,39,4,16,19,26,31,20}; 
  long answer; 
  answer = sump(marbles, marbles + SIZE); 
  printf("Общее количество элементов marbles равно %ld.\n", answer); 
  return 0; 
} 
/* использование арифметики указателей*/ 
int sump(int * start, int * end){ 
  int total = 0; 
  while (start < end) 
  { 
    total += *start; /* добавить значение к total */ 
    start++; /* переместить указатель на следующий элемент*/ 
  } 
  return total; 
} 
--------------------------------------------------------------------------

Задание 124.
Напишите функцию, которая возвращает индекс наибольшего значения из массива значений типа double. Протестируйте эту функцию с помощью простой программы. 

Задание 125.
Напишите функцию, которая возвращает разность между наибольшим и наименьшим значениями из массива типа double. Протестируйте эту функцию с помощью простой программы. 

Задание 126.
Напишите функцию, которая устанавливает значение элемента массива равным сумме соответствующих элементов двух других массивов. Иначе говоря, если массив 1 имеет значения 2, 4, 5 и 8, а массив 2 — значения 1, 0, 4 и 6, эта функция присваивает массиву 3 значения 3, 4, 9 и 14. Эта функция должна принимать имена трех массивов и их размерности в качестве аргументов. Протестируйте эту функцию с помощью простой программы. 

Задание 127.
Напишите программу, которая объявляет массив размерностью 3x5 и выполняет его инициализацию значениями по вашему выбору. Программа должна вывести эти значения на экран, удвоить все значения, после чего вывести на экран новые значения. Напишите одну функцию для вывода значений на экран и другую функцию для удваивания значений. В качестве аргументов функции принимают имя массивов и количество строк. 

Задание 128.
Напишите  программу, которая  предлагает  пользователю  ввести  три  набора, каждый из которых содержит по пять чисел типа double. 

Программа должна выполнять следующие действия: 
а.  Запоминать информацию в массиве размерности 3x5. 
б.  Вычислять среднее значение каждого набора из пяти чисел. 
в.  Вычислять среднее значение всех чисел. 
г.  Определять наибольшее из 15 значений. 
д.  Выводить на экран сообщение с результатами вычислений. 

Каждая более-менее крупная задача должна решаться специальной функцией с использованием  традиционного  для  языка C подхода  к  обработке  массивов. Выполните  задачу  б) с  помощью  функции, которая  вычисляет  и  возвращает среднее  значение одномерного  массива; воспользуйтесь  циклом  для  вызова этой функции три раза. Функции, реализующие остальные задачи, должны получать в качестве аргумента весь массив, а функции, выполняющие задачи в) и г) должны возвращать ответ в вызывающую программу. 

Тема 11. Символьные строки и строковые функции.

Задание 129.
Скомпилируйте и выполните следующую программу strings.c:
--------------------------------------------------------------------------
// коллекционирование пользователей
#include <stdio.h> 
#define MSG "вы должны обладать многими талантами. Назовите некоторые." 
// константа символьной строки
#define LIM 5 
#define LINELEN 81 // максимальная длина строки+ 1 
int main(void){ 
  char name[LINELEN]; 
  char talents[LINELEN]; 
  int i; 
  // инициализация массива значений
  // типаchar заданной размерности
  const char m1[40] = "Постарайтесь уложиться в одну строку."; 
  // пусть компилятор сам вычислит
  // размеры массива
  const char m2[] = "Если вам ничего не приходит в голову, придумайте что-нибудь."; 
  // инициализация указателя
  const char *m3 = "\nВсе, о себе достаточно, а вас как зовут?"; 
  // инициализация массива
  // указателей на строку
  const char *mytal[LIM] = { // массив из 5 указателей
	"Мгновенное складывание чисел", 
	"Точное умножение", "Накапливание данных", 
	"Исполнение инструкций с точностью до последней буквы", 
	"Знание языка программированияC" 
  }; 
  printf("Здравствуйте! Я компьютер по имени Клайд." 
		 " У меня масса талантов.\n"); 
  printf("Сейчас я расскажу кое-что о них.\n"); 
  puts("Что у меня за таланты? Вот только частичный их перечень."); 
  for (i = 0; i < LIM; i++) 
    puts(mytal[i]); // печать талантов компьютера
  puts(m3); 
  gets(name); 
  printf("Хорошо, %s, %s\n", name, MSG); 
  printf("%s\n%s\n", m1, m2); 
  gets(talents); 
  puts("Посмотрим, есть ли у меня этот перечень:"); 
  puts(talents); 
  printf("Благодарю за информацию, %s.\n", name); 
  return 0; 
}
--------------------------------------------------------------------------

Задание 130.
Скомпилируйте и выполните следующую программу quotes.c:
--------------------------------------------------------------------------
/* строки как указатели*/ 
#include <stdio.h> 
int main(void) 
{ 
	printf("%s, %p, %c\n", "We", "are", *"space farers"); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 131.
Скомпилируйте и выполните следующую программу p_and_s.c:
--------------------------------------------------------------------------
/* указатели и строки*/ 
#include <stdio.h> 
int main(void) 
{ 
	const char * mesg = "Не позволяйте себя запутать!"; 
	const char * copy; 
	copy = mesg; 
	printf("%s\n", copy); 
	printf("mesg = %s; &mesg = %p; value = %p\n", mesg, &mesg, mesg); 
	printf("copy = %s; &copy = %p; value = %p\n", copy, &copy, copy); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 132.
Скомпилируйте и выполните следующую программу name1.c:
--------------------------------------------------------------------------
/* программа считывает имя*/ 
#include <stdio.h> 
#define MAX 81 
int main(void) 
{ 
	char name[MAX]; /* выделить пространство памяти*/ 
	printf("Как вас зовут?\n"); 
	gets(name); /* поместить строку в массивname */ 
	printf("Прекрасное имя, %s.\n", name); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 133.
Скомпилируйте и выполните следующую программу name3.c:
--------------------------------------------------------------------------
/* программа считывает имена, пользуясь функцией fgets() */ 
#include <stdio.h> 
#define MAX 81 
int main(void) 
{ 
	char name[MAX]; 
	char * ptr; 
	printf("Как вас зовут?\n"); 
	ptr = fgets(name, MAX, stdin); 
	printf("%s? А! %s!\n", name, ptr); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 134.
Скомпилируйте и выполните следующую программу scan_str.c:
--------------------------------------------------------------------------
/* использование функции scanf() */ 
#include <stdio.h> 
int main(void) 
{ 
	char name1[11], name2[11]; 
	int count; 
	printf("Введите, пожалуйста, два имени.\n"); 
	count = scanf("%5s %10s",name1, name2); 
	printf("Прочитано%d имени: %s и%s.\n", count, name1, name2); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 135.
Скомпилируйте и выполните следующую программу put_out.c:
--------------------------------------------------------------------------
/* использование функции puts() */ 
#include <stdio.h> 
#define DEF "Я — строка, определенная директивой #define." 
int main(void) 
{ 
	char str1[80] = "Массив был инициализирован моим значением."; 
	const char * str2 = "Указатель был инициализирован моим значением."; 
	puts("Я — аргумент функции puts()."); 
	puts(DEF); 
	puts(str1); 
	puts(str2); 
	puts(&str1[2]); 
	puts(str2+4); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 136.
Скомпилируйте и выполните следующую программу put1.c:
--------------------------------------------------------------------------
/* печатает строку без добавления символа \n */ 
#include <stdio.h> 
void put1(const char * string) /* строка не меняется */ 
{ 
	while (*string != '\0') 
		putchar(*string++); 
} 
--------------------------------------------------------------------------

Задание 137.
Скомпилируйте и выполните следующую программу put2.c:
--------------------------------------------------------------------------
/* печатает строку и подсчитывает выведенные символы*/ 
#include <stdio.h> 
int put2(const char * string) 
{ 
	int count = 0; 
	while (*string) /* общая идиома*/ 
	{ 
		putchar(*string++); 
		count++; 
	} 
	putchar('\n'); /* символ новой строки не подсчитывается*/ 
	return(count); 
}
--------------------------------------------------------------------------

Задание 138.
Скомпилируйте и выполните следующую программу put_put.c:
--------------------------------------------------------------------------
// функции обработки ввода, объявленные пользователем
#include <stdio.h> 
void put1(const char *); 
int put2(const char *); 
int main(void) 
{ 
	put1("Если бы у меня было столько денег,"); 
	put1(" сколько можно было бы потратить,\n"); 
	printf("Получилось %d символов.\n", 
	put2("я никогда не чинила бы старые вещи.")); 
	return 0; 
} 
void put1(const char * string) 
{ 
	while (*string) /* то же что и *string != '\0' */ 
	putchar(*string++); 
} 
int put2(const char * string) 
{ 
	int count = 0; 
	while (*string) 
	{ 
		putchar(*string++); 
		count++; 
	} 
	putchar('\n'); 
	return(count); 
}
--------------------------------------------------------------------------

Задание 139.
Скомпилируйте и выполните следующую программу test_fit.c:
--------------------------------------------------------------------------
/* использование функции укорачивания строки*/ 
#include <stdio.h> 
#include <string.h> /* содержит прототипы строковых функций*/ 
void fit(char *, unsigned int); 
int main(void) 
{ 
	char mesg[] = "Вещи должны быть максимально простыми," 
				  " но никак не проще."; 
	puts(mesg); 
	fit(mesg,37); 
	puts(mesg); 
	puts("Рассмотрим еще несколько строк."); 
	puts(mesg + 38); 
	return 0; 
} 
void fit(char *string, unsigned int size) 
{ 
	if (strlen(string) > size) 
		*(string + size) = '\0'; 
} 
--------------------------------------------------------------------------

Задание 140.
Скомпилируйте и выполните следующую программу str_cat.c:
--------------------------------------------------------------------------
/* объединяет две строки*/ 
#include <stdio.h> 
#include <string.h> /* объявление функции strcat()*/ 
#define SIZE 80 
int main(void) 
{ 
	char flower[SIZE]; 
	char addon[] = " пахнет как старые валенки."; 
	puts("Какой ваш любимый цветок?"); 
	gets(flower); 
	strcat(flower, addon); 
	puts(flower); 
	puts(addon); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 141.
Скомпилируйте и выполните следующую программу join_chk.c:
--------------------------------------------------------------------------
/* объединяет две строки, сначала проверяя размер */ 
#include <stdio.h> 
#include <string.h> 
#define SIZE 30 
#define BUGSIZE 11 
int main(void) 
{ 
	char flower[SIZE]; 
	char addon[] = " пахнет как старые валенки. "; 
	char bug[BUGSIZE]; 
	int available; 
	puts("Какой ваш любимый цветок?"); 
	gets(flower); 
	if ((strlen(addon) + strlen(flower) + 1) <= SIZE) 
		strcat(flower, addon); 
	puts(flower); 
	puts("Какое ваше любимое насекомое?"); 
	gets(bug); 
	available = BUGSIZE - strlen(bug) - 1; 
	strncat(bug, addon, available); 
	puts(bug); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 142.
Скомпилируйте и выполните следующую программу nogo.c:
--------------------------------------------------------------------------
/* будет ли это работать? */ 
#include <stdio.h> 
#define ANSWER "Грант" 
int main(void) 
{ 
	char try[40]; 
	puts("Кто похоронен в могиле Гранта?"); 
	gets(try); 
	while (try != ANSWER) 
	{ 
		puts("Нет, неправильно. Попытайтесь еще раз."); 
		gets(try); 
	} 
	puts("Теперь правильно!"); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 143.
Скомпилируйте и выполните следующую программу compare.c:
--------------------------------------------------------------------------
/* эта программа будет работать*/ 
#include <stdio.h> 
#include <string.h> /* объявляет функцию strcmp() */ 
#define ANSWER "Грант" 
#define MAX 40 
int main(void) 
{ 
	char try[MAX]; 
	puts("Кто похоронен в могиле Гранта?"); 
	gets(try);
	while (strcmp(try,ANSWER) != 0) 
	{ 
		puts("Нет, неправильно. Попытайтесь еще раз."); 
		gets(try); 
	} 
	puts("Теперь правильно!"); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 144.
Скомпилируйте и выполните следующую программу compback.c:
--------------------------------------------------------------------------
/* значения, возвращаемые функцией strcmp() */ 
#include <stdio.h> 
#include <string.h> 
int main(void) 
{ 
	printf("strcmp(\"A\", \"A\") равно"); 
	printf("%d\n", strcmp("A", "A")); 
	printf("strcmp(\"A\", \"B\") равно"); 
	printf("%d\n", strcmp("A", "B")); 
	printf("strcmp(\"B\", \"A\") равно"); 
	printf("%d\n", strcmp("B", "A")); 
	printf("strcmp(\"C\", \"A\") равно"); 
	printf("%d\n", strcmp("C", "A")); 
	printf("strcmp(\"Z\", \"a\") равно"); 
	printf("%d\n", strcmp("Z", "a")); 
	printf("strcmp(\"apples\", \"apple\") равно"); 
	printf("%d\n", strcmp("apples", "apple")); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 145.
Скомпилируйте и выполните следующую программу copy1.c:
--------------------------------------------------------------------------
/* демонстрационная программа использования функции strcpy() */ 
#include <stdio.h> 
#include <string.h> /* объявление функции strcpy() */ 
#define SIZE 40 
#define LIM 5 
int main(void) 
{ 
	char qwords[LIM][SIZE]; 
	char temp[SIZE]; 
	int i = 0; 
	printf("Введите %d слов, начинающихся с буквы q:\n", LIM); 
	while (i < LIM && gets(temp)) 
	{ 
		if (temp[0] != 'q') 
			printf("%s не начинается с буквы q!\n", temp); 
		else 
		{ 
			strcpy(qwords[i], temp); 
			i++; 
		} 
	} 
	puts("Перечень слов, удовлетворяющих заданному критерию:"); 
	for (i = 0; i < LIM; i++) 
		puts(qwords[i]); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 146.
Скомпилируйте и выполните следующую программу copy2.c:
--------------------------------------------------------------------------
/* демонстрационная программа использования функции strcpy() */ 
#include <stdio.h> 
#include <string.h> /* объявление функции strcpy()*/ 
#define WORDS "beast" 
#define SIZE 40 
int main(void) 
{ 
	const char * orig = WORDS; 
	char copy[SIZE] = "Be the best that you can be."; 
	char * ps; 
	puts(orig); 
	puts(copy); 
	ps = strcpy(copy + 7, orig); 
	puts(copy); 
	puts(ps); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 147.
Скомпилируйте и выполните следующую программу copy3.c:
--------------------------------------------------------------------------
/* демонстрационная программа использования функцииstrncpy() */ 
#include <stdio.h> 
#include <string.h> /* объявление функции strncpy() */ 
#define SIZE 40 
#define TARGSIZE 7 
#define LIM 5 
int main(void) 
{ 
	char qwords[LIM][TARGSIZE]; 
	char temp[SIZE]; 
	int i = 0; 
	printf("Введите %d слов, начинающихся с буквы q:\n", LIM); 
	while (i < LIM && gets(temp)) 
	{ 
		if (temp[0] != 'q') 
			printf("%s не начинается с буквы q!\n", temp); 
		else 
		{ 
			strncpy(qwords[i], temp, TARGSIZE - 1); 
			qwords[i][TARGSIZE - 1] = '\0'; 
			i++; 
		} 
	} 
	puts("Перечень слов, удовлетворяющих заданному критерию:");

	for (i = 0; i < LIM; i++) 
		puts(qwords[i]); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 148.
Скомпилируйте и выполните следующую программу format.c:
--------------------------------------------------------------------------
/* форматирование строки*/ 
#include <stdio.h> 
#define MAX 20 
int main(void) 
{ 
	char first[MAX]; 
	char last[MAX]; 
	char formal[2 * MAX + 10]; 
	double prize; 
	puts("Введите свое имя:"); 
	gets(first); 
	puts("Введите свою фамилию:"); 
	gets(last); 
	puts("Введите сумму денежного приза:"); 
	scanf("%lf", &prize); 
	sprintf(formal, "%s, %-19s: $%6.2f\n", last, first, prize); 
	puts(formal); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 149.
Скомпилируйте и выполните следующую программу sort_str.c:
--------------------------------------------------------------------------
/* считывает строки и сортирует их*/ 
#include <stdio.h> 
#include <string.h> 
#define SIZE 81 /* предельная длина строки, включая \0 */ 
#define LIM 20 /* максимальное количество считываемых строк*/ 
#define HALT "" /* нулевая строка для прекращения ввода*/ 
void stsrt(char *strings[], int num); /* функция сортировки строк*/ 
int main(void) 
{ 
	char input[LIM][SIZE]; /* массив, в котором сохраняются результаты ввода*/ 
	char *ptstr[LIM]; /* массив переменных типа указатель*/ 
	int ct = 0; /* счетчик ввода*/ 
	int k; /* счетчик вывода*/ 
	printf("Введите не более%d строк, и они будут отсортированы.\n",LIM); 
	printf("Чтобы остановить ввод, нажмите клавишуEnter в начале строки.\n"); 
	while (ct < LIM && gets(input[ct]) != NULL && input[ct][0] != '\0') 
	{ 	
		ptstr[ct] = input[ct]; /* установка указателей на строки*/ 
		ct++; 
	} 
	stsrt(ptstr, ct); /* сортировщик строк*/ 
	puts("\nОтсортированный список:\n"); 
	for (k = 0; k < ct; k++) 
		puts(ptstr[k]) ; /* отсортированные указатели*/ 
	return 0; 
} 

/* функция сортировки указателей строк*/ 
void stsrt(char *strings[], int num) 
{ 
	char *temp; 
	int top, seek;

	for (top = 0; top < num-1; top++) 
		for (seek = top + 1; seek < num; seek++) 
			if (strcmp(strings[top],strings[seek]) > 0) 
			{ 
				temp = strings[top]; 
				strings[top] = strings[seek]; 
				strings[seek] = temp; 
			} 
}
	
--------------------------------------------------------------------------

Задание 150.
Скомпилируйте и выполните следующую программу repeat.c:
--------------------------------------------------------------------------
/* функция main() с аргументами*/ 
#include <stdio.h> 
int main(int argc, char *argv[]) 
{ 
	int count; 
	printf("В командной строке имеются %d аргументов:\n", argc - 1);
	for (count = 1; count < argc; count++) 
		printf("%d: %s\n", count, argv[count]); 
	printf("\n"); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 151.
Скомпилируйте и выполните следующую программу hello.c:
--------------------------------------------------------------------------
/* преобразует аргумент командной строки в число*/ 
#include <stdio.h> 
#include <stdlib.h> 
int main(int argc, char *argv[]) 
{ 
	int i, times; 
	if (argc < 2 || (times = atoi(argv[1])) < 1) 
		printf("Использование: %s положительное-число\n", argv[0]); 
	else 
		for (i = 0; i < times; i++) 
			puts("Всего хорошего!"); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 152.
Скомпилируйте и выполните следующую программу strcnvt.c:
--------------------------------------------------------------------------
/* использование функции strtol() */ 
#include <stdio.h> 
#include <stdlib.h> 
int main() 
{ 
	char number[30]; 
	char * end; 
	long value; 
	puts("Введите число(или пустую строку для выхода из программы):"); 
	while(gets(number) && number[0] != '\0') 
	{ 
		value = strtol(number, &end, 10); /* десятичная система счисления*/ 
		printf("значение: %ld, останов на%s (%d)\n", value, end, *end); 
		value = strtol(number, &end, 16); /* шестнадцатеричная система счисления*/ 
		printf("значение: %ld, останов на %s (%d)\n", value, end, *end); 
		puts("Следующее число:"); 
	} 
	puts("Всего хорошего!\n"); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 153.
Разработайте и протестируйте функцию, которая читает первое слово строки ввода в массив и игнорирует остальную часть строки. Определите слово как последовательность  символов  без  пробелов, символов  табуляции  или  символов новой строки. 

Задание 154.
Разработайте и протестируйте функцию, которая осуществляет поиск в строке, переданной в первом параметре, первого появления символа, заданного во втором параметре функции. Функция должна возвратить указатель на этот символ, и ноль, если указанный символ в строке не найден. (Поведение этой функции дублирует действия библиотечной функции strchr().) Выполните тестирование функции в рамках завершенной программы, которая использует цикл для передачи входных значений рассматриваемой функции. 

Задание 155.
Напишите функцию под именем is_within(), которая принимает символ и указатель на строку как два параметра функции. Функция должна возвращать ненулевое  значение(true), если  заданный  символ  содержится  в  строке  и  ноль (false) в противном случае. Протестируйте эту функцию в рамках завершенной программы, которая использует цикл для передачи входных значений рассматриваемой функции. 

Задание 156.
Функция strncpy(s1,s2,n) копирует ровно n символов из строки s2 в строку s1, усекая при необходимости строку s2 или заполняя избыточные символы дополнительными нулевыми символами. Целевая строка может не содержать завершающего нулевого символа, если длина строки s2 равна или больше n. 
Функция возвращает строку s1. Напишите собственную версию этой функции. Протестируйте  эту  функцию  в  рамках  завершенной  программы, которая  использует цикл для передачи входных значений рассматриваемой функции.

Задание 157.
Напишите функцию под именем string_in(), которая принимает два указателя на  строки  в  качестве  аргументов. Если  вторая  строка  содержится  в  первой, функция должна возвратить адрес, с которого начинается вторая строка в первой строке. Например, вызов string_in("hats", "at") возвращает адрес символа a в строке hats. В противном случае функция должна возвратить нулевой указатель. Протестируйте эту функцию в рамках завершенной программы, которая использует цикл для передачи входных значений рассматриваемой функции. 

Задание 158.
Напишите функцию, которая замещает содержимое заданной строки этой же строкой, но в обратном порядке. Протестируйте эту функцию в рамках завершенной программы, которая использует цикл для передачи входных значений рассматриваемой функции. 

Задание 159.
Напишите функцию, которая принимает строку в качестве аргумента и удаляет из этой строки все пробелы. Протестируйте эту функцию в рамках программы, которая использует цикл для чтения строк до тех пор, пока не будет введена пустая строка. Программа должна применять эту функцию к каждой входной
строке и отображать результат на экране.  

Задание 160.
Напишите программу, которая читает строки и прекращает чтение на десятой строке включительно или при появлении символа EOF, в зависимости от того, какое из этих событий произойдет первым. Функция должна предложить пользователю  меню  с  пятью  вариантами: печать  исходного  списка  строк, печать
строк  в  виде  упорядоченной  последовательности  в  кодировке ASCII, печать строк в порядке возрастания их длины, печать строк в порядке возрастания длины первого слова строки и выход из программы. Меню должно выводиться на экран после выполнения каждой операции, указанной меню, пока пользователь не выберет вариант выхода из программы. Разумеется, программа должна выполнять все указанные в меню задачи. 

Задание 161.
Напишите программу, которая воспроизводит аргументы командной строки в обратном порядке. Другими словами, если аргументами командной строки являются до скорого свидания, данная программа должна вывести на экран свидания скорого до.  

Задание 162.
Напишите  программу  возведения  в  степень, которая  работает  в  режиме  командной строки. Первым аргументом командной строки должно быть число типа double, возводимое в соответствующую степень, а вторым аргументом — целочисленный показатель степени. 

Задание 163.
С помощью функций классификации символов создайте свою реализацию функции atoi(). 

Тема 12. Классы памяти, управление памятью.

Задание 164.
Скомпилируйте и выполните следующую программу hiding.c:
--------------------------------------------------------------------------
/* переменные в блоках*/ 
#include <stdio.h> 
int main() 
{ 
	int x = 30; /* исходное значениеx */ 
	printf("x во внешнем блоке: %d\n", x); 
	{ 
		int x = 77; /* новая переменнаяx, скрывает первуюx */ 
		printf("x во внутреннем блоке: %d\n", x); 
	} 
	printf("x во внешнем блоке: %d\n", x); 
	while (x++ < 33) /* исходное значениеx */ 
	{ 
		int x = 100; /* новая переменнаяx, скрывает первуюx */ 
		x++; 
		printf("x в циклеwhile: %d\n", x); 
	} 
	printf("x во внешнем блоке: %d\n", x); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 165.
Скомпилируйте и выполните следующую программу loc_stat.c:
--------------------------------------------------------------------------
/* использование локальных статических переменных*/ 
#include <stdio.h> 
void trystat(void); 
int main(void) 
{ 
	int count; 
	for (count = 1; count <= 3; count++) 
	{ 
		printf("Начинается итерация%d:\n", count); 
		trystat(); 
	} 
	return 0; 
} 

void trystat(void) 
{ 
	int fade = 1; 
	static int stay = 1; 
	printf("fade = %d и stay = %d\n", fade++, stay++); 
}
--------------------------------------------------------------------------

Задание 166.
Скомпилируйте и выполните следующую программу global.c:
--------------------------------------------------------------------------
/* использование внешней переменной*/ 
#include <stdio.h> 
int units = 0; /* внешняя переменная*/ 
void critic(void); 
int main(void) 
{ 
	extern int units; /* необязательное повторное объявление*/ 
	printf("Сколько фунтов весит маленький бочонок меда?\n"); 
	scanf("%d", &units); 
	while ( units != 56) 
		critic(); 
	printf("Вы должны это проверить!\n"); 
	return 0; 
} 
void critic(void) 
{ 
	/* необязательное повторное объявление опускается*/ 
	printf("Вам не повезло. Попытайтесь еще раз.\n"); 
	scanf("%d", &units); 
} 
--------------------------------------------------------------------------

Задание 167.
Скомпилируйте и выполните следующую программу rand0
--------------------------------------------------------------------------
/* генерация случайных чисел*/ 
/* используется переносимый алгоритм ANSI C */ 
static unsigned long int next = 1; /* начальное число*/ 
int rand0(void) 
{ 
	/* магическая формула генерации псевдослучайных чисел*/ 
	next = next * 1103515245 + 12345; 
	return (unsigned int) (next/65536) % 32768; 
}

--------------------------------------------------------------------------
--------------------------------------------------------------------------
/* компилируется с файлом rand0.c */ 
#include <stdio.h> 
extern int rand0(void); 
int main(void) 
{ 
	int count; 
	for (count = 0; count < 5; count++) 
		printf("%hd\n", rand0()); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 168.
Скомпилируйте и выполните следующую программу s_and_r:
--------------------------------------------------------------------------
/* s_and_r.c -- файл функций rand1() и srand1() */ 
/* использует переносимый алгоритм ANSI C */ 
static unsigned long int next = 1; /* начальное число*/ 
int rand1(void) 
{ 
	/* магическая формула для генерации псевдослучайных чисел*/ 
	next = next * 1103515245 + 12345; 
	return (unsigned int) (next/65536) % 32768; 
} 

void srand1(unsigned int seed) 
{ 
	next = seed; 
}
--------------------------------------------------------------------------
--------------------------------------------------------------------------
/* r_drive1.c -- тестирование функций rand1() и srand1() */ 
/* компилируется с файлом s_and_r.c */ 
#include <stdio.h> 
extern void srand1(unsigned int x); 
extern int rand1(void); 
int main(void) 
{ 
	int count; 
	unsigned seed;
	printf("Введите начальное число.\n"); 
	while (scanf("%u", &seed) == 1) 
	{ 
		srand1(seed); /* переустановить начальное число*/ 
		for (count = 0; count < 5; count++) 
			printf("%hd\n", rand1()); 
		printf("Введите следующее начальное число(или q для завершения):\n"); 
	} 
	printf("Программа завершена.\n"); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 169.
Скомпилируйте и выполните следующую программу s_and_r:
--------------------------------------------------------------------------
/* diceroll.c -- эмуляция игры в кости*/ 
#include "diceroll.h" 
#include <stdio.h> 
#include <stdlib.h> /* для библиотечной функцииrand() */ 
int roll_count = 0; /* внешнее связывание*/ 

static int rollem(int sides) /* переменная, приватная для данного файла*/ 
{ 
	int roll; 
	roll = rand() % sides + 1; 
	++roll_count; /* счетчик вызовов функции*/ 
	return roll; 
} 

int roll_n_dice(int dice, int sides) 
{ 
	int d; 
	int total = 0; 
	if (sides < 2) 
	{ 
		printf("Нужны, по меньшей мере, 2 грани.\n"); 
		return -2; 
	} 
	if (dice < 1) 
	{ 
		printf("Нужна, по меньшей мере, 1 кость.\n"); 
		return -1; 
	} 
	for (d = 0; d < dice; d++) 
		total += rollem(sides); 
	return total; 
} 
--------------------------------------------------------------------------
--------------------------------------------------------------------------
//diceroll.h 
extern int roll_count; 
int roll_n_dice(int dice, int sides);
--------------------------------------------------------------------------
--------------------------------------------------------------------------
/* manydice.c -- многократное бросание костей*/ 
/* компилируется с файлом diceroll.c */ 
#include <stdio.h> 
#include <stdlib.h> /* для библиотечной функцииsrand() */ 
#include <time.h> /* для функцииtime() */ 
#include "diceroll.h" /* для функцииroll_n_dice() */ 
/* и для переменнойroll_count */ 
int main(void) 
{ 
	int dice,roll; 
	int sides; 
	srand((unsigned int) time(0)); /* рандомизация начального числа*/ 
	printf("Введите количество граней кости или 0 для завершения программы.\n"); 
	while (scanf("%d", &sides) == 1 && sides > 0) 
	{ 
		printf("Сколько нужно костей?\n"); 
		scanf("%d", &dice); 
		roll = roll_n_dice(dice, sides); 
		printf("Вы бросали %d раз, используя %d %d-гранные кости.\n", roll, dice, sides); 
		printf("Сколько должно быть граней? Введите0 для завершения программы.\n"); 
	} 
	printf("Функция rollem() была вызвана %d раз.\n", roll_count); /* используется внешняя переменная*/ 
	printf("Удачи!\n"); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 170.
Скомпилируйте и выполните следующую программу dyn_arr.c:
--------------------------------------------------------------------------
/* динамически распределенный массив*/ 
#include <stdio.h> 
#include <stdlib.h> /* для функцийmalloc(), free() */ 
int main(void) 
{ 
	double * ptd; 
	int max; 
	int number; 
	int i = 0; 
	puts("Введите максимальное количество элементов типа double."); 
	scanf("%d", &max); 
	ptd = (double *) malloc(max * sizeof (double)); 
	if (ptd == NULL) 
	{ 
		puts("Не удалось распределить память. Аварийное завершение."); 
		exit(EXIT_FAILURE); 
	} 
	/* ptd теперь указывает на массив элементовmax */ 
	puts("Введите значения(q для выхода из программы):"); 
	while (i < max && scanf("%lf", &ptd[i]) == 1) 
		++i; 
	printf("Введено %d элементов:\n", number = i); 
	for (i = 0; i < number; i++) 
	{ 
		printf("%7.2f ", ptd[i]); 
		if (i % 7 == 6) 
			putchar('\n'); 
	} 
	if (i % 7 != 0) 
		putchar('\n'); 
	puts("Программа завершена."); 
	free(ptd); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 171.
Напишите и протестируйте в цикле функции, которая возвращает количество ее вызовов. 

Задание 172.
Напишите программу, которая генерирует список 100 случайных чисел в диапазоне от 1 до 10 в порядке убывания. 

Задание 173.
Напишите программу, которая генерирует1000 случайных чисел в диапазоне от 1 до10. Не надо сохранять или выводить на печать эти числа, вместо этого программа  должна  выводить, сколько  раз  появлялось  каждое  число. Программа должна выполнить эту процедуру для 10 различных начальных чисел. Одинаково ли количество появлений этих чисел? Можете использовать функции, рассмотренные в этой главе или функции rand() и srand() стандарта ANSI C того же формата. Это один из способов проверки, насколько случайны числа, выдаваемые генератором случайных чисел.

Тема 13. Файловый ввод-вывод.

Задание 174.
Скомпилируйте и выполните следующую программу count.c:
--------------------------------------------------------------------------
/* использование стандартного ввода-вывода*/ 
#include <stdio.h> 
#include <stdlib.h> // прототип ANSI C функции exit() 
int main(int argc, char *argv[]) 
{ 
	int ch; // место, куда помещается каждый символ в том виде, 
			// в каком он был прочитан
	FILE *fp; // "указатель на файл" 
	long count = 0; 
	if (argc != 2) 
	{ 
		printf("Использование: %s filename\n", argv[0]); 
		exit(1); 
	} 
	if ((fp = fopen(argv[1], "r")) == NULL) 
	{ 
		printf("Не удается открыть%s\n", argv[1]); 
		exit(1); 
	} 
	while ((ch = getc(fp)) != EOF) 
	{ 
		putc(ch,stdout); // то же, что иputchar(ch); 
		count++; 
	} 
	fclose(fp); 
	printf("Файл%s содержит%ld символов\n", argv[1], count); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 175.
Скомпилируйте и выполните следующую программу reducto.c:
--------------------------------------------------------------------------
// сжимает ваши файлы до одной трети первоначальных размеров! 
#include <stdio.h> 
#include <stdlib.h> // для функции exit() 
#include <string.h> // для функций strcpy(), strcat() 
#define LEN 40 
int main(int argc, char *argv[]) 
{ 
	FILE *in, *out; // объявление двух указателей наFILE 
	int ch; 
	char name[LEN]; // хранилище для имени выходного файла
	int count = 0; 
	// проверка аргументов командной строки
	if (argc < 2) 
	{ 
		fprintf(stderr, "Использование: %s filename\n", argv[0]); 
		exit(1); 
	} 
	// настройка ввода
	if ((in = fopen(argv[1], "r")) == NULL) 
	{ 
		fprintf(stderr, "Не удается открыть файл\"%s\"\n", argv[1]); 
		exit(2); 
	} 
	// настройка вывода
	strncpy(name,argv[1], LEN - 5); // копирование имени файла
	name[LEN - 5] = '\0'; 
	strcat(name,".red"); // добавить суффикса.red 
	if ((out = fopen(name, "w")) == NULL) 
	{ // открыть файл для записи
		fprintf(stderr,"Не могу построить выходной файл.\n"); 
		exit(3); 
	} 
	// копирование данных
	while ((ch = getc(in)) != EOF) 
		if (count++ % 3 == 0) 
			putc(ch, out); // печатать каждый третий символ
	// очистка
	if (fclose(in) != 0 || fclose(out) != 0) 
		fprintf(stderr,"Ошибка при закрытии файла\n"); 
	return 0; 
} 
--------------------------------------------------------------------------

Задание 176.
Скомпилируйте и выполните следующую программу addaword.c:
--------------------------------------------------------------------------
/* использование функций fprintf(), fscanf() и rewind() */ 
#include <stdio.h> 
#include <stdlib.h> 
#define MAX 40 
int main(void) 
{ 
	FILE *fp; 
	char words[MAX]; 
	if ((fp = fopen("wordy", "a+")) == NULL) 
	{ 
		fprintf(stdout,"Не удается открыть файл\"words\".\n"); 
		exit(1); 
	} 
	puts("Введите слова, которые нужно включить в файл; нажмите клавишуEnter"); 
	puts("в начале строки для завершения программы."); 
	while (gets(words) != NULL && words[0] != '\0') 
		fprintf(fp, "%s ", words); 
	puts("Содержимое файла:"); 
	rewind(fp); /* вернуться в начало файла*/ 
	while (fscanf(fp, "%s",words) == 1) 
		puts(words); 
	if (fclose(fp) != 0) 
		fprintf(stderr,"Ошибка при закрытии файла\n"); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 177.
Скомпилируйте и выполните следующую программу parrot.c:
--------------------------------------------------------------------------
/* использование функций fgets() и fputs() */ 
#include <stdio.h> 
#define MAXLINE 20 
int main(void) 
{ 
	char line[MAXLINE]; 
	while (fgets(line, MAXLINE, stdin) != NULL && line[0] != '\n') 
		fputs(line, stdout); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 178.
Скомпилируйте и выполните следующую программу reverse.c:
--------------------------------------------------------------------------
/* отображение файла в обратном порядке*/ 
#include <stdio.h> 
#include <stdlib.h> 
#define CNTL_Z '\032' /* маркер конца файла в текстовых файлахDOS */ 
#define SLEN 50 
int main(void) 
{ 
	char file[SLEN]; 
	char ch; 
	FILE *fp; 
	long count, last; 
	puts("Введите имя файла для обработки:"); 
	gets(file); 
	if ((fp = fopen(file,"rb")) == NULL) 
	{ /* режим только чтения и двоичный режим*/ 
		printf("Программаreverse не может открыть%s\n", file); 
		exit(1); 
	} 
	fseek(fp, 0L, SEEK_END); /* перейти в конец файла*/ 
	last = ftell(fp); 
	for (count = 1L; count <= last; count++) 
	{ 
		fseek(fp, -count, SEEK_END); /* вернуться*/ 
		ch = getc(fp); 
		/* для DOS, работает в Unix */ 
		if (ch != CNTL_Z && ch != '\r') 
			putchar(ch);
		/* для Macintosh */ 
		/* if (ch == '\r') 
		putchar('\n'); 
		else 
			putchar(ch); */ 
	} 
	putchar('\n'); 
	fclose(fp); 
	return 0; 
}
--------------------------------------------------------------------------

Задание 179.
Скомпилируйте и выполните следующую программу append.c:
--------------------------------------------------------------------------
/* добавление содержимого файлов в конец другого файла*/ 
#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#define BUFSIZE 1024 
#define SLEN 81 
void append(FILE *source, FILE *dest); 
int main(void) 
{ 
	FILE *fa, *fs; // fa для файла назначения, fs для исходного файла
	int files = 0; // количество добавляемых файлов
	char file_app[SLEN]; // имя файла назначения
	char file_src[SLEN]; // имя исходного файла
	puts("Введите имя файла назначения:"); 
	gets(file_app); 
	if ((fa = fopen(file_app, "a")) == NULL) 
	{ 
		fprintf(stderr, "Не удается открыть файл%s\n", file_app); 
		exit(2); 
	}
	if (setvbuf(fa, NULL, _IOFBF, BUFSIZE) != 0) 
	{ 
		fputs("Не удается создать буфер вывода\n", stderr); 
		exit(3); 
	} 
	puts("Введите имя первого исходного файла(или пустую строку для завершения):"); 
	while (gets(file_src) && file_src[0] != '\0') 
	{ 
		if (strcmp(file_src, file_app) == 0) 
			fputs("Нельзя добавлять файл в конец самого себя\n",stderr); 
		else if ((fs = fopen(file_src, "r")) == NULL) 
				fprintf(stderr, "Не удается открыть файл%s\n", file_src); 
			else 
			{ 
				if (setvbuf(fs, NULL, _IOFBF, BUFSIZE) != 0) 
				{ 
					fputs("Не удается создать буфер ввода\n",stderr); 
					continue; 
				} 
				append(fs, fa); 
				if (ferror(fs) != 0) 
					fprintf(stderr,"Ошибка во время чтения файла%s.\n", file_src); 
				if (ferror(fa) != 0) 
					fprintf(stderr,"Ошибка во время записи в файл%s.\n", file_app); 
				fclose(fs); 
				files++; 
				printf("Файл%s добавлен.\n", file_src); 
				puts("Введите имя следующего файла(или пустую строку для завершения):"); 
			} 
	} 
	printf("Готово. Добавлено%d файлов.\n", files); 
	fclose(fa); 
	return 0; 
} 

void append(FILE *source, FILE *dest) 
{ 
	size_t bytes; 
	static char temp[BUFSIZE]; // распределить один раз
	while ((bytes = fread(temp,sizeof(char),BUFSIZE,source)) > 0) 
		fwrite(temp, sizeof (char), bytes, dest); 
} 
--------------------------------------------------------------------------

Задание 180.
Напишите программу копирования файлов, которая принимает имена исходного файла и файла копии из командной строки. По возможности используйте стандартный ввод-вывод и двоичный режим. 

Задание 181.
Напишите программу, которая последовательно отображает на экране все файлы, список которых представлен в командной строке. Используйте argc для управления циклом. 

Задание 182.
Напишите  программу,  которая  принимает  в  качестве  аргументов  командной строки некоторый символ и ноль или более имен файлов. Если за символом не следуют никакие аргументы, программа должна читать стандартный ввод. В противном случае она должны последовательно открыть каждый файл и сообщить,  сколько раз указанный символ появляется в каждом файле. Имя файла и сам символ должны быть указаны вместе с каждым подсчетом. Включите в программу средства контроля ошибок с тем, чтобы проверить корректность количества аргументов и возможность открытия файлов. Если файл не может быть открыт, программа должны сообщить об этом факте и перейти к следующему файлу. 

Задание 183.
Напишите  программу, которая  принимает  два  аргумента  командной  строки. Первый аргумент — это строка, а второй аргумент — имя файла. Затем программа выполняет поиск файла, распечатывая все строки, содержащие заданную. Поскольку эта задача ориентирована на строки, а не на символы, воспользуйтесь  функцией  fgets() вместо getc().  Кроме того используйтесь функцию strstr() из стандартной библиотеки C для поиска строки, содержащей заданную.

Тема 14. Структуры и другие формы данных.

Задание 184.
Скомпилируйте и выполните следующую программу book.c:
--------------------------------------------------------------------------
/* каталог для одной книги*/ 
#include <stdio.h> 
#define MAXTITL 41 /* максимальная длина названия+ 1 */ 
#define MAXAUTL 31 /* максимальная длина имени автора+ 1 */ 
struct book { /* шаблон структуры: дескриптором являетсяbook */ 
	char title[MAXTITL]; 
	char author[MAXAUTL]; 
	float value; 
}; /* конец шаблона структуры*/ 

int main(void) 
{ 
	struct book library; /* объявить библиотеку как переменную типаbook */ 
	printf("Введите название книги.\n"); 
	gets(library.title); /* доступ к разделу названия книги*/ 
	printf("Теперь введите ФИО автора.\n"); 
	gets(library.author); 
	printf("Теперь введите цену.\n"); 
	scanf("%f", &library.value); 
	printf("%s от%s: $%.2f\n",library.title, 
	library.author, library.value); 
	printf("%s: \"%s\" ($%.2f)\n", library.author, 
	library.title, library.value); 
	printf("Готово.\n"); 
	return 0; 
} 















